{
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-1.description": "Progress from BlocksJr to MartyBlocks!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-1.step-1": "Welcome to MartyBlocks! <br /><br /> Let’s recap what we know from MartyBlocks Jr to get used to this new setup.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-1.step-2": "We can find the “start button” in Events. <br /><br /> Drag it to the script area to start coding",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-1.step-3": "In Motion, we can find the “get ready!” block. <br /><br />  Remember it’s always good to add this block in before Marty starts moving.<br /><br /> Place this below the green flag block.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-1.step-4": "Can you recreate this MartyBlocks Jr sequence in MartyBlocks? <br /><br /> We already have the green flag and get ready block, let's do the rest!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-1.step-5": "You can find the walk forwards block in Motion. <br /><br /> Add the block after \"Get ready!\" and change the number of steps Marty does in the white space. Type \"4\" to match the BlocksJr code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-1.step-6": "You can find the slide block in Motion too. <br /><br /> Add the block after \"Walk 4 steps forwards\", set the dropdown box to \"right\" and type \"3\" to match the BlocksJr code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-1.step-7": "Use the same block to make Marty slide left. <br /><br /> Add the block after \"Slide 3 times right\", set the dropdown box to \"left\" and type \"2\" to match the BlocksJr code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-1.step-8": "Finally, we'll add the walk backwards block. <br /><br /> Add the block after \"Slide 2 times left\", and type \"1\" to match the BlocksJr code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-1.step-9": "<b/>You did it! You've successfully transitioned from BlocksJr to MartyBlocks.</b> <br /><br /> Now you're ready to explore MartyBlocks and do so many cool things with Marty!",

  "gui.howtos.lessons.type-lesson-marty-blocks-intro-2.description": "Learn how to create and control Sprites in MartyBlocks!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-2.step-1": "We can use sprites to do so many things in MartyBlocks! From controlling Marty, to broadcasting messages and taking inputs. <br /><br /><b/>Let's use our mouse to control a sprite and explore different backdrops!</b>",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-2.step-2": "Choose a sprite to work with - you can select a sprite from the library or get a surprise sprite!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-2.step-3": "Let's select a green flag block to begin - drag it to the script area to start coding.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-2.step-4": "Let’s use the “forever” loop so that the sprite keeps following until we tell it to stop with the red stop button.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-2.step-5": "In Motion, select the point towards mouse-pointer block. <br /><br /> Add this as our first block in the forever loop.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-2.step-6": "Also in Motion, select the walk 10 steps block. <br /><br /> Let’s add this below the point towards block, and change the number of steps to 5.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-2.step-7": "You can also change the background that your sprite sits on. <br /><br />These can help us do even more things with sprites.  <br /><br />  Choose ten different backdrops (you’ll know you’ve done this when it says backdrops: 10)",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-2.step-8": "Let’s help our sprite switch between these backdrops to explore!  <br /><br />Select a switch backdrop block, and use the dropdown menu to select “random backdrop\".<br /><br />Place this between the “when green flag clicked” block and the forever loop, like shown in the sample code here:",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-2.step-9": "You did it! <br /><br /> <b/>Now every time we click the green flag, we can explore a new backdrop with our sprite! </b><br/><br /> You can use the button with four arrows to watch your sprite in full screen!",

  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.description": "Let's explore Events and Sprites, and how they can control Marty's movements!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-1": "Now that we know how to control a Sprite, lets use a Sprite, a backdrop and some Event blocks to control Marty in the Arctic!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-2": "First things first, let's open up the sprite menu to choose our arctic sprite. <br /><br /><b/>Search for \"polar-bear\"</b> and select the sprite to place it in the backdrop.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-3": "Great! Now let’s make sure our polar bear feels at home. <br /><br />Open up the backdrops menu, then select the arctic backdrop to give our polar bear a home!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-4": "Click on the polar bear in the sprite menu to bring up its code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-5": "Then navigate to events. <br /><br />These blocks say <b/>“when this happens, do that”</b>. They can help us make sure our code only runs when we want it to.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-6": "To start coding, we need two seperate event blocks. <br /><br />Select the green flag event block and the “when this sprite clicked” event block.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-7": "We want to write code that says:  <br /> <br />  <i> When this sprite clicked, switch backdrop to arctic.  <br />  When green flag clicked, switch backdrop back to default.</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-8": "Lets get two “switch backdrop” blocks from Looks, and add them underneath the event blocks as shown <br /><br />Use the dropdown menu to choose arctic for one, and backdrop1 (the default) for the other.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-9": "Now let’s use Marty’s event blocks to make him react to this code. <br /><br />Navigate to your Marty’s blocks by clicking on Marty in the devices menu.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-10": "We want to write code that says:  <br />  <i> When backdrop switches to arctic, wiggle! </i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-11": "In events, select a “when backdrop switches to” block. <br /> Use the dropdown menu to select Arctic.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-12": "Finally, navigate to Motion, select the \"Wiggle!\" block, and place it as shown in the sample code:",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-3.step-13": "You did it! Click the green flag to reset the scene, then click the polar bear to make an arctic scene, and watch Marty wiggle!",

  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.description": "Use a sprite to tell Marty that it’s party time!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-1": "We can use sprites to communicate with Marty, and with each other, by broadcasting messages.<br /><br />We’re going to use a sprite to tell Marty that it’s party time!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-2": "First, let’s select a party backdrop. <br/>Open up the backdrop menu and search <b/>party</b> to set the scene.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-3": "Now our party needs some music! <br/>   Click “Choose a Sprite” and search <b/>speaker</b> to complete our party scene.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-4": "Click on the speaker in the sprites menu to navigate to the speaker's code. We want to write code that says:  <br /><br /><i> when this sprite clicked, broadcast “party time!\"</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-5": "Drag this block into the coding area to begin our sprite code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-6": "Drag the \"broadcast message1\" block into position as shown. <br /><br />",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-7": "Use the dropdown box to select \"new message\", then create a new message called \"party time!\" to broadcast.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-8": "This should be your completed speaker sprite code.<br/><br/>Now let's tell Marty what to do when he hears the message <i/>party time!</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-9": "Navigate to your Marty’s blocks by clicking on Marty in the devices menu.",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-10": "In events we’ll select “when I receive”, drag it to the scripting area and use the dropdown box to select \"party time!\" <br /><br />We'll use this to tell Marty what to do when it's party time - play music and dance!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-11": "Select the start sound block, and place it like shown below.<br/><br/>Use the dropdown box to select \"Celebrate!\" and start the party!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-12": "Finally, navigate to Motion, select the \"Dance!\" block, and place it as shown in the sample code below.<br/><br/>Now Marty can really party!",
  "gui.howtos.lessons.type-lesson-marty-blocks-intro-4.step-13": "You did it! Click on the speaker to start the music, and watch Marty party!",

  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.description": "Learn to use if statements to keep Marty safe!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.step-1": "In this tutorial, we're going to learn how <b/> if statements</b> and Marty's <b/>obstacle sensors</b> work!  <br /><br /> We'll use them together in a forever loop to help Marty stop walking if something's blocking his path.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.step-2": "This is an if statement block.  <br /><br />If-statements are really important in programming. They help us control when a code runs.<br/><br/>Sometimes we only want a part of code to run <b /> if <b /> something else is true.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.step-3": "Code inside the if statement will only run if the code in the diamond is true - we can do so much with if-statements!<br /><br /> Drag an if statement block into the scripting area to start our code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.step-4": "We’re going to use Marty’s obstacle sensors for this activity - you can see them here in the red cicles.<br /><br />They can tell if something is blocking Marty’s path by using a special kind of invisible light called infrared (IR).",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.step-5": "IR sensors are made up of two parts: <b />transmitters and receivers.</b>  <br /><br />The <b />transmitter</b> sends out invisible light, which gets reflected back if there’s an obstacle in the way. <br /> The <b />receiver</b> looks for IR light bouncing back off an obstacle.   <br /><br />If the receiver detects reflected light, then the sensor knows that there’s something in the way.  <br /><br />IR sensors are used to open automatic doors, park cars and help Marty robots avoid obstacles! <br/><br/><br/><i/>Click the image to expand the diagram.</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.step-6": "Navigate to Sensing and select the “select foot obstacle sensed” block.<br /><br />In this example, you can choose either the left or right ground sensor from the dropdown menu - but you have to pick one or the block won’t work!!<br /><br />place the sensing block inside the diamond of the if-statement block like shown below. This code now says, if <i />“foot obstacle sensed” is true, then do something. </i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.step-7": "If Marty senses an obstacle, we want him to stop so we can keep him safe. Inside our if-statement, let’s put a “stop Marty immediately” block.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.step-8": "We don’t want Marty to check for obstacles just once, we want him to keep checking over and over, so let’s put our if-statement inside a forever loop.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.step-9": "Great! Now let’s test our if-statement code by making Marty walk forwards forever unless he sees an obstacle.<br /><br />Select the “walk 2 steps forward” block and place it by itself, ready to run in parallel with our if statement code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.step-10": "Let's place our walk block inside a forever loop so Marty keeps walking unless he sees an obstacle.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-1.step-11": "You did it!<br /><br /> Now place Marty on the ground in front of an obstacle, click both forever loops to start your code, and see if Marty keeps himself safe!<br /><br /> Try removing the obstacle and check if Marty knows that it's safe to keep walking.",

  "gui.howtos.lessons.type-lesson-marty-blocks-coding-2.description": "Learn to use if else statements to keep Marty safe!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-2.step-1": "In this tutorial, we're going to learn how <b/> if-else statements</b> work! <br /><br /> We'll use Marty's ground sensors in an if-else statement to stop Marty walking off of an edge.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-2.step-2": "We already know how to use an if statement. <br /><br /> Code inside the if statement will only run <b/>if</b> the code in the diamond is true - but what if we want to control what happens when the code is NOT true? <br /><br /> If-else statements help us say <b /> if </b> this is true, run some code, <b/>else</b> run some other code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-2.step-3": "Select an if-else statement. <br /><br /> Drag it into the scripting area to start our code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-2.step-4": "We’re going to use Marty’s ground sensors for this activity. They can tell if Marty's foot is on a surface or not.<br /><br /> We want to make sure he only walks forward <b/> if BOTH feet are on the ground.<b/> <br /><br /> Select <b/>two</b> “select foot sensor on the ground” blocks. Use the dropdown menu to set one to the right foot, and one to the left. <br /><br /> We want to tell Marty to walk forward <b/>IF</b> both feet on the ground is true.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-2.step-5": "To make sure our code checks both sensors at once, we’ll use the and block in Operators.   <br /><br />Place both sensor blocks inside the and block like shown in the sample code:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-2.step-6": "Now let’s put the and block into our if-else block, so it matches the sample code below.<br /><br />This code now says: <i/>If “left foot and right foot on the ground” is true, do something. If that’s not true, do something else.<i/>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-2.step-7": "Let’s fill in our if-else statement. If both feet are on the ground, we want Marty to walk forward. Place a walk forward block in the top space like shown.<br /><br /> Since we want Marty to check both feet are safely on the ground after <b/>every step</b>, change the \"2\" to \"1\" in the walk block.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-2.step-8": "If one or both feet are off the ground, we want to stop Marty safely - to do this, we’ll use the get ready block to straighten up his legs. <br /><br />Place a get ready block after \"else\", like shown below:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-2.step-9": "Almost done! Except we don’t want our code to just run once, we want it to run over and over, so lets put it all inside a <b/>forever loop.</b>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-2.step-10": "You did it! Now let’s put your code to the test!    <br /><br /> <b/>  Important:</b> we recommend placing your Marty on an edge <b/>no higher than 5 inches</b>, to prevent damage if any falls occur.   <br/>We recommend using a <b/>white surface</b> (like a piece of paper) for Marty to walk on, as this can help with the accuracy of his ground detection.    <br /><br /> Place your Marty on a small ledge and click the forever loop to test Marty’s fall prevention!",

  "gui.howtos.lessons.type-lesson-cog-tutorial-3.name": "Reaction test game!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.description": "Let's make a reaction test game!<br /><br />We'll program Cog to light up randomly and the player will have a short amount of time to hit the button and score a point<br /><br />We'll use a <i>variable</i> to keep the score, and a timer to check if they're fast enough",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-1": "Let's make a reaction test game!<br /><br />We'll program Cog to light up randomly and the player will have a short amount of time to hit the button and score a point<br /><br />We'll use a <i>variable</i> to keep the score, and a timer to check if they're fast enough",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-2": "First, make sure you are connected to a cog.<br /><br />If not, add one like you did in the last tutorial by pressing the Add button in the devices panel and selecting a Cog, then clicking connect. If you need to, skip back to the last tutorial to see how",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-3": "Add a <b>When flag clicked</b> block from the <b>Events</b> category<br /><br />This will be the start of our program, and will run when we press the green flag at the top of the screen",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-4": "<b>Add a</b> <i>set [ring] LEDs to [color]</i> <b>block</b> from the <b>Looks</b> category,<br /><br />Change it to set the <i>button</i> color",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-5": "Add a <b>wait [1] seconds</b> block from the <b>Control</b> category",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-6": "Go back to the <b>Looks</b> category and add a <b>Turn off all LEDs</b> block<br /><br />Add it just after the wait block, so that Cog turns off the button LED after 1 second",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-7": "<b>Try it out!</b> Click the green flag to start the program! The button on Cog will light up for 1 second then turn off",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-8": "<b>Check if you can press the button in time!</b> Go to the <b>Events</b> category and add an <b>On button pressed</b> block<br /><br />",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-9": "Add an <b>If __ then</b> block under the <b>On button pressed</b> block from the <b>Control</b> category<br /><br />We'll use this if block to check if the player has pressed the button in time",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-10": "Drag a < block into the if block from the <b>Operators</b> category<br /><br />The < symbol means 'less than' and will only be true if the number on the left is smaller than the number on the right",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-11": "Drag the <b>timer</b> block from the <b>Sensing</b> category into the first box on the < block<br /><br />Then set the second box to 1, so that the line says <i>if timer &lt; 1 then</i>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-12": "The timer is a special variable which measures time in seconds.<br /><br />Whatever code we put in the if block will only be run if the timer variable is less than 1 second",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-13": "Add a <b>Reset timer</b> block under the <b>When flag clicked</b> block<br /><br />This will reset the timer variable back to 0 just before the button LED is turned on",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-14": "Go back to the <b>Looks</b> category and add a <b>Set [ring] LEDs to [color]</b> block inside the if block<br /><br />Change the color to whatever you like, and make sure you add it inside the if statement!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-15": "Add a <b>Play note [C4] for [1] seconds</b> block from the <b>Sound</b> category<br /><br />Place it straight after the <b>Set LED</b> block, and change it to play <b>C6</b> for <b>0.25 seconds</b>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-16": "Add a <b>Turn off all LEDs</b> block after the <b>Play note</b> block<br /><br />The code inside the if statement will only be run (and so Cog will only light up and beep) if the button is pressed within 1 second of the timer being reset",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-17": "<b>Try it out!</b> Press the green flag to start, then if you press the button within 1 second the lights will turn on and you'll hear the beep!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-18": "Now let's make the light turn on more than once!<br /><br />Go to the <b>Control</b> category and add a <b>Repeat</b> block around the code under the <b>When flag clicked</b> block<br /><br />This will make Cog light up multiple times!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-19": "Also add another <b>Wait [1] seconds</b> block inside the repeat loop",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-20": "Go to the <b>Operators</b> category, and change the time on that wait block to a random number between 1 and 5 seconds",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-21": "Now when you press the green flag you'll have 10 chances to hit the button while it's lit up!<br /><br />There will be a random pause between each one, and during each iteration through the loop, the timer is reset, so we don't need to change the code that reacts to the button press. <br /><br />Try it out! How many of the lights can you catch?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-22": "Keeping track of your score in your head is a bit boring. Let's add code to keep score automatically!<br /><br />Go to the <b>Variables</b> category and make a variable called <b>score</b>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-23": "Add a <b>Set [my variable] to [0]</b> block straight after the <b>When flag clicked</b> block, before the repeat loop",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-24": "Change the variable to <b>score</b> so that it says <i>Set score to 0</i><br /><br />Now whenever you start the game the score will be reset to 0",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-25": "Inside the if statement, add a change [my variable] by 1 block and select the <b>score</b> variable from the menu, so it says 'change score by 1'",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-26": "Try it out!<br /><br />Now every time you press in time the score will increase by 1!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-27": "Now let's make it a bit more difficult!<br /><br />What if the lights go faster as you went on?<br /><br />Make another variable and call it <i>delay</i>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-28": "Set 'delay' to 1 at the start of the program, right after you reset the score",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-29": "Let's decrease the delay each time through the repeat loop!<br /><br />Add a <b>Change [delay] by [1]</b> block inside the repeat loop.<br /><br />We don't wait the delay to decrease too much, so set it to change 'delay' by -0.05. That will decrease it by 1/20th of a second each time",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-30": "Over the 10 iterations of the repeat loop, the delay will decrease from 1 second to 0.5 (or half a second)",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-31": "Now let's use the delay variable<br /><br />One nice thing about variables is that we can use them in more than one place<br /><br />Drag the delay variable into the '<' block so that it says <i>if timer &lt; delay then</i><br /><br />Also drag it into the 'wait [1] second' block, so that it says 'wait [delay] seconds'",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-32": "Try it out!<br /><br />Do you notice the game speeding up?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-33": "Let's make cog show the score to the player at the end.<br /><br />We can do that like we did with the dice in the last activity.<br /><br />First of all, make a variable called <b>ledID</b>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-34": "Then add a <b>set variable</b> block after the repeat loop, and set <b>ledID</b> to 0.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-35": "Next, go to the <b>Control</b> category and add another <b>repeat</b> loop.<br /><br />Replace the number in it with the 'score' variable, so that it says 'repeat [score]'",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-36": "Add a <b>Set LED [1] to [color]</b> block inside this new repeat loop<br /><br />Replace the number with the 'ledID' variable, so that it says 'Set LED [ledID] to [color]'<br /><br />Then set the color to whatever you like!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-37": "And finally, add a <b>Change [variable] by [1]</b> block after that set LED block, and make it change <b>ledID</b> by 1",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-38": "Try it out!<br /><br />Now when you finish, Cog will display your score!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-39": "Well done - you've done some pretty advanced coding!<br /><br />You've learned how to use variables to keep track of things during a game<br /><br />We used a timer and a less than operator to make a comparison, along with an if statement to decide whether the player pressed the button in time.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-3.step-40": "Next steps!<ul><li>Could you make the game more difficult? What about adding a few more levels that will be even faster?</li><li>Using what you learned in the dice tutorial, could you make Cog celebrate if the player gets a perfect score?</li><li>If you have friends or classmates with cogs, take turns to play a game of whack-a-mole using more than one cog at a time! Everyone should press the green flag at the same time, and then players should take turns to try and score as many points as possible across all the cogs. At the end, add up your score by adding the number of lights on each of the cogs</li></ul>",

  "gui.howtos.lessons.type-lesson-cog-tutorial-4.name": "Reactive light show!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.description": "Let's make a light show that reacts as you interact with Cog!</br></br>We'll learn how to make animations on Cog's LEDs, respond to objects being sensed, the amount of force on the button, and to light being sensed.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-1": "Let's make a light show that reacts as you interact with Cog!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-2": "First, make sure you are connected to a cog.<br /><br />If not, add one like you did in the last tutorial by pressing the Add button in the devices panel and selecting a Cog, then clicking connect. If you need to, skip back to the last tutorial to see how",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-3": "Go to the <b>Events</b> category and add an <b>on object sensed [left]</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-4": "Go to the <b>Looks</b> category and add a <b>set LEDs using the colorpicker</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-5": "Set the colors to be whatever you'd like.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-6": "Try it out! Put an object on the left obstacle sensor.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-7": "Add another <b>on object sensed</b> block from the <b>Events</b> category.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-8": "Change the sensor to the right, using the dropdown menu.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-9": "Go back to the <b>Looks</b> category and add another <b>set LEDs using the colorpicker</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-10": "Try it out! Put an object on the right obstacle sensor.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-11": "You can make animations on Cog by using multiple colorpicker blocks connected together.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-12": "That animation was made up of 9 <b>frames</b>, each one in a separate Colorpicker block, with a turn off LEDs block at the end.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-13": "Here are the individual frames for that animation.<br /><br />Can you plan an animation of your own and have it play when cog senses an object?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-14": "Can you make an animation that changes smoothly as you move Cog from being sat on one object sensor to being sat on the other?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-15": "So far, whenever we've used the button on Cog, it's been detecting whether it is pressed or not.<br /><br />We call this type of information a <b>boolean</b> - something that is either true or false.<br /><br />As well as thinking of the button as a boolean input, we can also use it as an <b>analogue</b> input - one that can have lots of different values.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-16": "Go to the <b>Sensing</b> category and check the box next to the <b>Button force value %</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-17": "You'll see a monitor appear showing the value of the button force sensor.<br /><br />If you push the button the value will change.<br /><br />Let's use that value to get the lights on cog to change color as you push the button harder.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-18": "Go to the <b>Events</b> category and add a <b>When flag clicked</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-19": "Now go to the <b>Control</b> category and add a <b>forever</b> loop.<br /><br />Unlike the <b>repeat</b> loop that only repeated a certain number of times, the <b>forever</b> loop will keep looping until you press the red stop button.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-20": "Go to the <b>Looks</b> category, and add a <b>set [ring] LEDs to [color]</b> block into the forever loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-21": "Now drag the block that says <b>hue [360] saturation [100] lightness [100]</b> into the spot for the color in the <b>set [ring] LEDs to [color]</b> block.<br /><br />There are a couple of different ways to describe colors, and Hue, Saturation and Lightness (or Value) is one of them.<br /><br />With these three numbers we can describe any color.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-22": "The <b>Hue</b> is a number between 0 and 360 (like the degrees on a circle) that says which basic color we want.<br /><br />It can be shown in a circle - and you've seen that already when using the colorpicker!<br /><br />0 degrees is at the top and represents red. 90 degrees is a greeney-yellow, 180 degrees is a cyan blue, 270 degrees is purple, and 360 degrees is back to red!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-23": "<b>Saturation</b> says how vivid you want the color to be.<br /><br />In this example for a hue of 360, a saturation of 100 will be the reddest red there is.<br /><br />A saturation of 0 will be white - the least red there is.<br /><br />And a saturation of 50 will be in the middle - pink.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-24": "Lastly, <b>lightness</b> (or brightness, or value) says how light you want the color to be.<br /><br />In this example, with a hue of 360 and a saturation of 100, a brightness of 100 again gives the reddest red.<br /><br />A brightness of 0 gives no red at all - in this case the LED on Cog would just be turned off!<br /><br />A brightness of 50 will be in the middle - a dark red.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-25": "Let's use the <b>button force</b> to set one of these!<br /><br />Go back to the <b>Sensing</b> category and drag the <b>button force value</b> block into the lightness space in the <b>hue, saturation, lightness</b> block.<br /><br />Also add a <b>wait 0.1 seconds</b> at the end of the forever loop so that the lights don't change too quickly.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-26": "Let's turn on the light in the button on Cog as well for fun!<br /><br />Add a <b>Set [ring] LEDs to [color]</b> block before the forever loop, and change it to set the <b>button</b>. Pick any color you like.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-27": "Try it out! As you push down on the button the LEDs will turn on brighter and brighter red!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-28": "Try it with the button force setting the saturation instead of the lightness.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-29": "Now the lights will change from white to red as you push the button!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-30": "Lastly try setting the hue instead.<br /><br />The value for hue needs to go from 0 to 360, so we’ll need to do some maths.<br /><br />Go to the <b>Operators</b> category and drag a <b>multiple</b> block into the hue value.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-31": "Set it to multiply the button force value by 3.6.<br /><br />This will mean that instead of giving numbers from 0 to 100, we’ll get numbers from 0 to 360 (3.6 x 100).<br /><br />Try it out!<br /><br />Now as you push the button the color of the lights will change from red to green to blue and back to red!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-32": "See if you can make the color of the button change too!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-33": "Next up, lets see if we can make Cog react to bright lights by glowing for a bit.<br /><br />Delete the code that you made to change the colors based on button force, by dragging it into the blocks palette.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-34": "Go to the <b>Sensing</b> category and check the box next to the <b>Ambient light value</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-35": "Make a note of what the ambient light value is normally.<br /><br />Then, get a torch and shine it on Cog, make a note of what values you get.<br /><br />You’ll probably be able to reach the maximum value the sensor can give - 4095!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-36": "Go to the <b>Control</b> category and add a <b>wait until</b> block under the <b>When flag clicked</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-37": "Next, go to <b>Operators</b> and add a <b>greater than</b> block into the <b>wait until</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-38": "Go back to the <b>Sensing</b> category and drag the <b>Ambient light value</b> block into the left side of the <b>&gt;</b> block.<br /><br />Change the right side to a number that will only be reached when you shine a torch on Cog.<br /><br />You don’t need to put in the maximum number, just one that’s higher than what you see without a torch.<br /><br />Here I’ve picked 1500, so the whole line reads <b>wait until ambient light value &gt; 1500</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-39": "Add a <b>Set [ring] LEDs to [color]</b> block under the <b>wait until</b> block.<br /><br />Also add a <b>Turn off all LEDs</b> block at the top, to make sure things are reset.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-40": "Try it out!<br /><br />Click the green flag to begin the code.<br /><br />Then, when you shine a torch on Cog the lights will turn on!<br /><br />The <b>wait until</b> block will make execution of the code stop until the condition that you put in it is met.<br /><br />In this case that’s checking if the light sensor value is bright enough.<br /><br />Once the condition is true, the <b>wait until</b> block is satisfied, and execution moves on to the <b>set [ring] LEDs to [color]</b> block to turn on the LEDs.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-41": "Let’s make the lights on Cog turn on gradually when it detects a torch.<br /><br />To do that we’ll use a variable again!<br /><br />Go to the <b>Variables</b> category and make a variable called <b>brightness</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-42": "Add a block to <b>set brightness to 0</b> at the start of the code.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-43": "Now add a <b>repeat until</b> block under the <b>wait until</b> block, and make it surround the <b>Set [ring] LEDs to [color]</b> block.<br /><br />You can find the <b>repeat until</b> block in the <b>Control</b> category.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-44": "Using the <b>brightness</b> variable that you just made, change it so that the line reads <b>repeat until brightness &gt; 100</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-45": "Now add a <b>change brightness by 10</b> block inside the <b>repeat until</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-46": "Change the <b>set [ring] LEDs to [color]</b> block to use a <b>hue, saturation, lightness</b> block.<br /><br />Use the <b>brightness</b> variable for lightness.<br /><br />Also change the color to a nice blue by setting the hue to 180.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-47": "Then add a <b>wait</b> block from the <b>Control</b> category and change it to <b>wait 0.1 seconds</b>.<br /><br />This will slow down the fade in a bit.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-48": "The <b>repeat until</b> block is a bit like a combination of the <b>repeat</b> block you used before, that repeated a particular number of times, and the <b>wait until</b> block you just used.<br /><br />In this case it will keep on repeating until the condition is met, and then it will stop repeating and code execution will move on.<br /><br />In this example, it will keep repeating the loop and gradually increasing the brightness until the brightness reaches the maximum value of 100.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-49": "Try it out!<br /><br />Click the green flag to run the code.<br /><br />Now when you shine a torch on Cog the lights will gradually turn on!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-50": "Let’s make the lights fade out again when you take the torch away!<br /><br />Add another <b>wait until</b> block, but this time set it to wait until the ambient light value is less than a threshold.<br /><br />Do this by using a <b>&lt;</b> (less than) block from the <b>Operators</b> category.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-51": "Now add another <b>repeat until</b> block and make it repeat until the brightness is less than (<) 0.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-52": "Duplicate the code from inside the previous <b>repeat until</b> loop.<br /><br />You can do this by right clicking (or pressing and holding) and then selecting <b>Duplicate</b>.<br /><br />Put the new code into the new <b>repeat until</b> loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-53": "This code will nearly work, but can you spot the bug?<br /><br />The brightness will keep on increasing instead of decreasing!<br /><br />Change it so that it says <b>change brightness by -5</b> instead.<br /><br />The <b>-5</b> here will subtract 5 from the brightness variable each time.<br /><br />This will fade out the lights at half the speed that we faded them in.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-54": "Try it out! Now when you take the torch away the lights on Cog will fade out again!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-55": "Let’s make it so you don’t need to click the green flag every time you want Cog to react.<br /><br />Add a <b>forever</b> loop so that it starts after the <b>Turn off all LEDs</b> block and surrounds all the other code.<br /><br />Now Cog will carry on reacting to bright lights until you press the red stop sign!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-56": "Well done - you’ve learned loads!<br /><br />You learned how to make animations from lots of individual frames.<br /><br />You learned how to make Cog react to the object sensors.<br /><br />We learned about analogue values that can vary, and used the lights on Cog to indicate how much force was pushing the button.<br /><br />We learned about how to describe colors using Hue, Saturation and Brightness (or Value).<br /><br />We also learned how to use the light sensor on Cog, and did a really quick experiment to take some readings from the sensor to help us write our code.<br /><br />Using <b>wait until</b>, <b>repeat until</b> blocks, variables and comparison operators, we made Cog light up to respond to bright lights!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-4.step-57": "Next steps - if you’re in a class with other people with Cogs, or if you have more than one, try putting lots of them together while they’re running the code you just made.<br /><br />Can you use a torch to write things on them and paint with light?",

  "gui.howtos.lessons.type-lesson-cog-tutorial-5.name": "Spirit Level",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.description": "Let's make another useful thing with Cog! <br /><br />This time we'll use Cog's tilt sensing to make a spirit level - something that shows if something is level or whether it is tilting. <br /><br />Lots of spirit levels only work in one dimension, but we'll make ours work in two!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-1": "<b>Let's make a spirit level</b> that shows if something is level or tilting!<br /><br />We'll use Cog's tilt sensing to make it work in two dimensions.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-2": "First, make sure you are connected to a cog.<br /><br />If not, add one like you did in the last tutorial by pressing the Add button in the devices panel and selecting a Cog, then clicking connect. If you need to, skip back to the last tutorial to see how",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-3": "Go to the <b>Events</b> category and add an <b>on tilt [left]</b> event block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-4": "Now go to the <b>Looks</b> category and add a <b>set LEDs using the colorpicker</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-5": "Click the <b>lights off</b> icon to turn all the lights off.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-6": "Then set just one LED on the left to be on.<br /><br />Try it out! Tilt cog to the left.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-7": "Add another <b>on tilt [left]</b> block from the control category and change it so that it says <b>on tilt [right]</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-8": "Connect that <b>on tilt [right]</b> block to another <b>set LEDs using the colorpicker</b> block and set it to have only the LED on the right on.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-9": "Try it out!<br /><br />Tilt cog left and right.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-10": "Add another set of <b>on tilt</b> and <b>colorpicker</b> blocks.<br /><br />Set it to react on <b>tilt [backward]</b> and to make only the LED at the 6 o’clock position turn on.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-11": "Finally add a fourth set of blocks and set them to <b>on tilt [forward]</b>, and to turn on the LED at the front of cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-12": "Try it out!<br /><br />Tilt cog in all four directions and see how the light moves around!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-13": "Let's show this information on the screen as well!<br /><br />Go to the <b>Sensing</b> category.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-14": "Select the checkbox next to <b>Accelerometer X</b>.<br /><br />Then change X to Y from the dropdown menu, and select the checkbox next to that.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-15": "Tilt cog around and look at how the numbers change!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-16": "Let's look at that in a bit more detail, click the <b>Sensor Dashboard</b> button.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-17": "Then click the button to <b>add a new graph</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-18": "And select your Cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-19": "A graph will appear!<br /><br />We need to select the sensors we want to display. Click to expand the <b>Accelerometer</b> category, and then check the boxes next to <b>X</b> and <b>Y</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-20": "Press the <b>play</b> button to start showing the sensor data.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-21": "Tilt cog and look at how the values for the X-axis and Y-axis change.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-22": "Click the <b>x</b> button to close the sensor dashboard.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-23": "Let's do some science! You'll need some paper to take some notes.<br /><br />Tilt cog to the right and note down what value the accelerometer ax and accelerometer ay sensors have.<br /><br />Then do the same for tilting forwards, backwards, and to the left.<br /><br />We'll use this data in a little bit!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-24": "Now go to the <b>Variables</b> category and make two variables called <b>ax</b> (for accelerometer x) and <b>ay</b> (for accelerometer y).",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-25": "Add these blocks to your project:<br /><br /><ul><li>When flag clicked:</li><ul><li>Forever:</li><ul><li>Set ax to Accelerometer X</li><li>Set ay to Accelerometer Y</li></ul></ul></ul>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-26": "Now go to the <b>Events</b> category.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-27": "Add a <b>broadcast [message1]</b> block inside the forever loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-28": "Let's give the message a better name, select <b>New message</b> from the dropdown.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-29": "Then give the new message the name <b>update position</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-30": "Now click on the <b>Sprites</b> tab at the top.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-31": "Click the <b>Add sprite</b> button and select the <b>Ball</b> sprite (or any other sprite you like).",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-32": "Your code will disappear! Don’t worry - it’s still there, just linked to cog rather than to this sprite.<br /><br />Go to the <b>Events</b> category and add a <b>when I receive [update position]</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-33": "Change it so that it says <b>when I receive [update position]</b> - that’s the message we just made.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-34": "Now go to the <b>Motion</b> category.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-35": "Add a <b>go to x: [] y: []</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-36": "The middle of the screen has the coordinates [0,0].<br /><br />Coordinates to the right of the middle have x values above 0.<br />Coordinates to the left of the middle have x values below 0.<br />Coordinates above the middle have y values above 0.<br />Coordinates below the middle have y values below 0.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-37": "We want to move the ball around to show how much Cog is tilted.<br /><br />Look back at the notes you made on which accelerometer readings you got when you tilted cog in each of the four directions.<br /><br />We want the ball to move left and right when you tilt cog left and right. For the sprite, left and right are set by its x coordinate.<br /><br />You should see that when you tilted cog to the right, the ay value was above 0, while the ax value was nearly 0. When you tilted to the left the ay value was below 0.<br /><br />This means we should use the ay value to set the x coordinate of the sprite.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-38": "We’ll also need to make the number bigger by multiplying it.<br /><br />Go to the <b>Operators</b> category and drag a <b>multiplication</b> block into the x coordinate box.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-39": "Go to the <b>Variables</b> category and add the <b>ay</b> variable to the multiplication block.<br /><br />Type <b>100</b> in the other side of the multiplication block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-40": "Look again at your notes on the accelerometer readings.<br /><br />Which number changed when you tilted cog backward and forwards?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-41": "You should see that <b>ax</b> changed - so we’ll use that to set the y coordinate.<br /><br />Add another multiplication block and put the <b>ax</b> variable inside it.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-42": "But there’s a problem! We want the sprite to move up when you tilt cog forwards, which would mean it needed a y coordinate above 0.<br /><br />But when you tilted cog forwards the ay value was below 0!<br /><br />To fix this, we’ll need to multiply it by <b>-100</b> rather than <b>100</b>. The extra minus sign will flip it from being below 0 to above 0, and vice versa.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-43": "Go back to your cog code by clicking on the cog symbol in the devices panel.<br /><br />Cog will light up and beep when you select it!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-44": "Now press the <b>green flag</b> to run your code.<br /><br />You should see the ball move around as you tilt cog!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-45": "Let’s add a background behind the ball to better indicate what we’re displaying.<br /><br />Select the <b>Stage</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-46": "Then select the <b>Backdrops</b> tab.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-47": "Draw a few circles around the middle point.<br /><br />Feel free to make them colorful if you’d like!<br /><br />Hint - if you’re on a computer you can hold shift to make sure you get a circle instead of an ellipse.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-48": "You can select the <b>Code</b> tab at the top to go back to the coding screen, and select Cog again.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-49": "Try it out!<br /><br />Now as you tilt Cog you’ll be able to see a guide of how close you are to being level!<br /><br />When Cog is stationary, there’s always 1G of gravity acting on it. If you tilt cog a lot you’ll see that you can get ax or ay to be equal to 1 - that’ll happen when the indicator is as far as it’ll go from the middle.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-50": "If you tilt at a 45 degree angle the indicator will be the same distance from the middle, but ax and ay will now be around 0.7 - can you think why that is?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-51": "If we think of the amount of tilt as a right-angled triangle, pythagoras’ theorem tells us that if the sides of the triangle are both about 0.7, the hypotenuse will be 1!<br /><br />That’s what’s happening here, where 1G of gravity at 45 degrees is being made up of 0.7G in the X direction and 0.7G in the Y direction.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-52": "Well done!<br /><br />You’ve learned how to use the tilt sensing on Cog to make a spirit level - a device that shows if something is level or tilted.<br /><br />We learned about sprites in the Blocks interface, and used variables and a message to communicate between cog and the sprite.<br /><br />We thought about how to represent data - the amount of tilt in x and y - in a way that would be easy to understand - using lights on cog and the movement of the sprite against a gauge in the background.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-53": "Let’s make Cog also indicate when it’s flat!<br /><br />Go back to the <b>Sensing</b> category and select the checkbox next to <b>Tilt direction</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-54": "Look at what happens to the <b>Tilt direction</b> as you move Cog around.<br /><br />When it is nearly flat the tilt direction will be <b>none</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-55": "Add this code.<br /><br />It uses a couple of new blocks.<br /><br />The <b>if … else</b> block works really similarly to the <b>if</b> block we used before. If the condition is true then the code inside the if part will be executed, however if the condition is false, then the code in the else part will be executed instead.<br /><br />Using the <b>if … else</b> block we can write alternative code that only runs if the condition is not true.<br /><br />The other new block is an <b>=</b> block. This is another type of comparator - it compares two things. Here we’re comparing the <b>Tilt direction</b> sensor and the word <b>none</b>.<br /><br />If the Tilt direction is exactly the same as the word <b>none</b>, then the condition will be true and the button LED will be set to green, and the ring LEDs turned off!<br /><br />If the Tilt direction is equal to anything apart from <b>none</b>, then the button LED will be turned off instead.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-5.step-56": "Try it out!<br /><br />Now you’ll get a signal on Cog as well when it’s level 🙂",

  "gui.howtos.lessons.type-lesson-cog-tutorial-6.name": "Let’s make a skiing game!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.description": "Let’s make a game where we use Cog and Sprites on screen!<br /><br />We’ll make a skiing game where the player has to avoid hitting trees and rocks.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-1": "Let’s make a game where we use Cog and Sprites on screen!<br /><br />We’ll make a skiing game where the player has to avoid hitting trees and rocks.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-1.2": "First, make sure you are connected to a cog.<br /><br />If not, add one like you did in the last tutorial by pressing the Add button in the devices panel and selecting a Cog, then clicking connect. If you need to, skip back to the last tutorial to see how",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-2": "Go to the Events category and add an <b>On object sensed [left]</b> block.<br /><br />We’ll use this as our start button.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-3": "Add a <b>forever</b> loop from the Control category.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-4": "Go to the variables category and make a variable called <b>ay</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-5": "Add blocks to <i>set [ay] to [accelerometer [Y]]</i> inside the forever loop.<br /><br />You’ll need to use a <b>set</b> block from the Variables category, the <b>Accelerometer</b> block from the Sensors category, and to change the axis to <b>Y</b> using the dropdown menu.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-6": "Add a <b>broadcast [message 1]</b> block, and set it to broadcast a <b>New Message</b> called <i>update position</i>.<br /><br />We’ll use this as a signal to move our sprite around.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-7": "Add another <b>broadcast [message1]</b> block before the forever loop, and set it to broadcast a <b>New Message</b> called <i>start</i>.<br /><br />We’ll use this to make sure everything resets at the beginning of a game.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-8": "Click the button to choose a sprite to add.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-9": "Add the <b>Penguin 2</b> sprite.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-10": "With the penguin sprite selected, add a <b>when I receive [start]</b> block from the Events category.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-11": "Go to the Looks category and add a <b>set size to [100]%</b> block.<br /><br />Change the size to 20%.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-12": "Go back to the Events category and add a <b>when I receive [update position]</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-13": "Go to the Motion category and add a <b>go to x: [] y: []</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-14": "Change it to say <b>go to x: [[ay] x 200] y:0</b>.<br /><br />You’ll need to use a <b>multiply (*)</b> block from the Operators category, and the <b>ay</b> variable from the Variables category.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-15": "Try it out!<br /><br />Cover the left object sensor to start the game, then tilt Cog left and right to move the penguin left and right.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-16": "Let’s add some obstacles!<br /><br />Add the <b>Tree1</b> sprite.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-17": "With the Tree sprite selected, add a <b>when I receive [start]</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-18": "From the Looks category, add a <b>set size to [30]%</b> block, and a <b>hide</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-19": "Add a <b>forever</b> loop from the Control category.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-20": "Inside the forever loop, add a <b>create clone of [myself]</b> block.<br /><br />A clone is an identical copy of something.<br /><br />In this case the create clone block will make a copy of the tree sprite, and all the code that is linked to it.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-21": "After that block, add a <b>wait [1] seconds</b> block.<br /><br />This will mean that a new tree will be made every 1 second.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-22": "Now add a <b>when I start as clone</b> block.<br /><br />Any code attached to this will be run when the clone is created.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-23": "Add a <b>go to x: [pick random [-240] to [240] y: [-200]</b> block.<br /><br />You can find the <b>pick random</b> block in the Operators category.<br /><br />This will make the new clone of the tree start at a random place on the bottom of the screen.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-24": "Add a <b>glide [1] secs to: x[] y:[]</b> block.<br /><br />The glide blocks makes a smooth movement over a certain amount of time.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-25": "Change it to say <b>glide [2] secs to x: [x position] y: [200]</b>.<br /><br />You can find the x position block in the Motion category.<br /><br />This will make the tree move from the bottom to the top of the screen over 2 seconds, keeping the x position (the left and right position) the same.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-26": "Before the glide block, add a <b>show</b> block from the Looks category.<br /><br />The clone will start hidden, since the sprite it was copied from was hidden, so we’ll need to show it before we start moving it.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-27": "We want each clone of the tree to disappear when it reaches the top of the screen.<br /><br />To do this, add a <b>delete this clone</b> block from the Control category, under the glide block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-28": "Try it out!<br /><br />A new tree will appear every second and move up the screen.<br /><br />To stop the program, press the red Stop sign.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-29": "Let’s make the game detect if the penguin crashes into a tree.<br /><br />With the Tree sprite still selected, add another <b>when I start as clone</b> block, and a <b>forever</b> loop under it.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-30": "Add an <b>if [] then</b> block inside the forever loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-31": "Change it to say <b>if [touching [Penguin 2]] then</b>.<br /><br />You can find the touching block in the Sensing category, and can select Penguin 2 from the dropdown menu.<br /><br />This if condition will be true if the tree is touching the penguin.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-32": "Inside the if condition, add a <b>stop [all]</b> block.<br /><br />This will make the game finish if the penguin bumps into a tree.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-33": "Try it out!<br /><br />Cover the left object sensor to start the game, and tilt Cog to steer the penguin to avoid the trees.<br /><br />When you touch a tree the game will finish!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-34": "Let’s add a score!<br /><br />Make another variable called <b>score</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-35": "With the Tree sprite still selected, add a <b>set [score] to [0]</b> block after the <b>when I receive [start]</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-36": "And add a <b>change [score] by [1]</b> block between the glide and delete this clone blocks.<br /><br />This will make the score increase by 1 for every tree that we successfully avoid.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-37": "Let’s make the game get harder as it goes on.<br /><br />Add another variable called <b>delay</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-38": "Add these blocks alongside the other ones for the Tree sprite.<br /><br />When the game starts, the delay will be set to 1.<br /><br />Then, every 5 seconds the delay will be set to ¾ (three quarters) of what it was before.<br /><br />It will go from 1 second, to 0.75 seconds (three quarters of a second), to 0.56 (just over half a second), to 0.42, to 0.3 seconds, and so on!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-39": "Now use the delay variable to set the time between the trees being created.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-40": "Try it out!<br /><br />You’ll notice that the trees start appearing much more quickly the further you go!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-41": "Let’s add some lights on Cog to make things more exciting.<br /><br />Add a <b>broadcast [stop] and wait</b> block before the <b>stop [all]</b> block.<br /><br />You will need to create a New Message called <b>stop</b>.<br /><br />The <b>broadcast [stop] and wait</b> block will make sure that whatever code runs when the stop message is sent will get to finish before the code continues and the <b>stop [all]</b> block runs.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-42": "Select Cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-43": "Add a <b>set [ring] LEDs to [green]</b> block and a <b>set [ring] LEDs to pattern [Spin1]</b> block as shown here.<br /><br />That will start the lights spinning on Cog when the game starts.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-44": "Add a <b>when I receive [stop]</b> block and a block to <b>set [ring] LEDs to [red]</b>.<br /><br />They will make the lights turn red when the game finishes.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-6.step-45": "Well done!<br /><br />You’ve learned how to make a game in Blocks! We’ve used the clone functionality to make lots of copies of trees to avoid, and made Cog control a character on the screen.<br /><br />Next steps:<ul><li>Can you make another type of obstacle to avoid - maybe rocks?</li><li>Can you make the penguin jump when you press the button on Cog?</li><li>Can you make it so that you can jump over the rock obstacles to get bonus points?</li></ul>",

  "gui.howtos.lessons.type-lesson-cog-tutorial-7.name": "Musical Instrument",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.description": "Let’s turn Cog into a musical instrument!<br /><br />We’ll make Cog play notes that change based on how you interact with it, and learn about musical keys.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-1": "Let’s turn Cog into a musical instrument!<br /><br />We’ll make Cog play notes that change based on how you interact with it, and learn about musical keys.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-2": "First of all, let’s measure what Cog “sees” when you interact with the object sensor.<br /><br />Get a blank sheet of paper and use a ruler to make marks every centimeter from 0-5cm. Number the marks from 0-5.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-3": "Place Cog on the 0 mark with the right object sensor pointing towards the distance marks.<br /><br />Change the IR Sensor value [left] block to the <i>right</i> sensor, and check the box next to it.<br /><br />That will display the reading from the IR sensor - another name for the object sensor since it uses infrared light to work.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-4": "Write down the value of the IR Sensor Right with nothing in front of it.<br /><br />Then put your hand on the 5cm mark, note down the number the sensor reads now.<br /><br />It’s normal for the values to move up and down a bit - try to write down a number that’s in the middle of these variations.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-5": "Repeat this with your hand on the 4cm, 3cm, 2cm, 1cm and 0cm marks.<br /><br />You should end up with a table of measurements.<br /><br />You might notice that the numbers change a lot when your hand is close to Cog, but less the further away your hand gets.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-6": "Let’s make Cog play a note when the button is pressed.<br /><br />Add an <b>on button press</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-7": "We’re going to use the right IR sensor to choose which note to play. Let’s take a snapshot of it by making a variable called <b>reading</b> and setting it to the value of the right IR sensor.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-8": "Now we need to use conditionals to select which note to play.<br /><br />We only want to play one note, so we’ll use the <b>if … else</b> block.<br /><br />For the condition, add a <b>less than</b> (<) comparator, and set it to <b>reading &lt; [2100]</b>. Instead of 2100, set this number to the one you measured when your hand was on the 4cm line.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-9": "Add a <b>Start note [C4]</b> block inside the if part of the if … else block.<br /><br />This is the lowest note we’ll make, and we’ll make it when the reading from the IR sensor is low - i.e. your hand is far away from it.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-10": "Try it out!<br /><br />Push the button with nothing in front of Cog - you should hear a note.<br /><br />Push the button again with your hand a couple of cm in front of cog - nothing should happen because we went to the else part of the conditional instead.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-11": "Let’s code up more notes!<br /><br />We’ll add another <b>if … else</b> block inside the else part of the first one.<br /><br />Putting conditionals inside each other like this is called nesting.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-12": "Set the condition of the second if … else block to say <b>[reading] &lt; 2200</b>, but instead of 2200 use the number you measured with your hand on the 3cm line.<br /><br />Add another <b>Start note</b> block inside the if part of the second conditional, and set it to play the note <b>D4</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-13": "Do that twice more, so you end up with four if … else blocks.<br /><br />You can do this more quickly if you right click, or press and hold the last if… else block and select the <b>Duplicate</b> option.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-14": "For the third conditional, set the number to the one you measured at the 2cm mark.<br /><br />For the fourth conditional, set the number to the one you measured at the 1cm mark.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-15": "Change the third note to <b>E4</b>.<br /><br />Change the fourth note to <b>G4</b>.<br /><br />You might notice that we skipped a note! We’re only going to play five notes, and we’re selecting them from something called the pentatonic C scale.<br /><br />Pentatonic means it has 5 notes per octave, and C is the musical key. A key tells you about the sharps and flats that are used in a song - they’re the black notes on a piano.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-16": "Now it’s time for the fifth note.<br /><br />There’s no need to use another if … else block as this is the only option left!<br /><br />Add a <b>Start note [A4]</b> block into the else part of the last if … else conditional.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-17": "Try it out!<br /><br />Can you get Cog to make all 5 notes?<br /><br />You can change the numbers a bit if you want to make any adjustments.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-18": "Let’s make Cog stop playing the note when you stop pressing the button.<br /><br />After all the if .. else blocks, add a <b>wait until [[button clicked] = [False]]</b> block, and a <b>Stop sounds</b> block.<br /><br />You’ll need to look in the Control category for the wait until block, the Operators category for the = block, The Sensing category for the button clicked block, and the Sounds category for the Stop sounds block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-19": "Try it again!<br /><br />Now Cog will stop playing the note when you stop pressing the button.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-20": "It would be fun if you could change note while you had the button held down.<br /><br />Put a <b>repeat until</b> block around all the code just after the on button press block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-21": "Set the condition in the repeat until block to be <b>[[button clicked] = False]</b>.<br /><br />Move the <b>Stop sounds</b> block outside of the repeat until loop, and replace the <b>wait until</b> block with a <b>wait [0.1] seconds</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-22": "Try it out!<br /><br />Pick up Cog and move your hand back and forth in front of the sensor while you have the button pushed - you should hear the note go up and down!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-23": "We’ve made Cog play notes in the key of C, so we should be able to play along with any song that’s also in the key of C!<br /><br />For example, try playing along to “Let it Be” by The Beatles.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-24": "It would be even cooler if we could change notes more quickly, but we need to make sure we don’t send too many commands to Cog and overwhelm it.<br /><br />Let’s use variables to keep track of which note we’re playing, and only change it when we need to.<br /><br />Make two new variables called <b>note</b> and <b>lastNote</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-25": "Replace each of the <b>Start note</b> blocks with a <b>set [note] to [notec4]</b> block.<br /><br />You’ll need to type <b>notec4</b> exactly like that for this to work. For the other notes you’ll use <b>noted4</b>, <b>notee4</b>, <b>noteg4</b> and <b>notea4</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-26": "Replace the <b>wait [0.1] seconds</b> block after all the conditionals with an <b>if</b> block like this:<br /><br />The condition should be <b>if [not [[note] = [lastNote]] then</b>.<br /><br />You can find the <b>not</b> block in the Operators category. As you might expect, it’s only true if the thing inside it is false. So here, the condition is only true if the value of the note variable is not equal to the value of the lastNote variable.<br /><br />If that’s the case, there’s a new note to play, so inside the if block add a <b>Start note [note]</b> block.<br /><br />Also add <b>set [lastNote] to [note]</b>. This will make sure the program remembers what the last note was the next time around the loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-27": "Can you spot what the little bug would be if we finished the code here?<br /><br />A bug is a mistake - in this case there’s one more thing we need to do to make sure that we always play a note when the button is pushed - and that’s to clear the lastNote variable when we stop the sounds.<br /><br />Do this by adding a <b>set [lastNote] to [0]</b> block at the end of the code.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-28": "Try it out!<br /><br />Now when you move your hand the note should change more quickly!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-29": "Well done!<br /><br />You’ve made a musical instrument that you can use to play along with songs!<br /><br />Using the pentatonic scale for a song that’s in the same key, you can play along while staying in tune!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-30": "How else could you change the note?<br /><br />What about using how Cog is tilted? Then you could change the note just by twisting Cog left and right!<br /><br />You can modify your code to try that out - here’s a little hint for how to do that:",
  "gui.howtos.lessons.type-lesson-cog-tutorial-7.step-31": "Which do you prefer - using the IR sensor or the tilt to set the note?<br /><br />What other sensors could you use?<br /><br />Try playing along to other songs in the key of C.<br /><br />You could also change the notes to play the pentatonic scale for a different key instead. Many songs are all in the same key, although some have key changes - how could you make Cog change the key it’s playing in?",

  "gui.howtos.lessons.type-lesson-cog-tutorial-8.name": "Clock",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.description": "Let’s turn Cog into a clock!<br /><br />There are 12 LEDs in the ring on Cog, so we can use things like this hands on a clock to indicate hours, minutes and seconds!<br /><br />We’ll think a bit about the mathematics needed, and get creative with different ways to show the time!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-1": "Let’s turn Cog into a clock!<br /><br />There are 12 LEDs in the ring on Cog, so we can use things like this hands on a clock to indicate hours, minutes and seconds!<br /><br />We’ll think a bit about the mathematics needed, and get creative with different ways to show the time!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-2": "Add the following blocks to your code:<br /><br /><b>when green flag clicked</b><ul><li>turn off all LEDs</li><li>set LED [1] to [red]</li></ul>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-3": "Go to the <i>sensing</i> category and drag the <b>current [year]</b> block into the coding area.<br /><br />Change it to say <b>current [hour]</b> and click on it.<br /><br />Just like the sensors on Cog change value, this block will change to represent the current time.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-4": "The Blocks interface, like most computers, uses a 24 hour clock.<br /><br />If it’s in the morning, the current hour will be between 0 and 11.<br /><br />If it’s the afternoon, the current hour will be between 12 and 23.<br /><br />Normal analog clocks or watches use a 12-hour clock instead, where there are two 12 hour segments (am and pm) in a 24 hour day.<br /><br />Cog has 12 LEDs in the ring, so we’ll also use a 12 hour clock. How can we change the number in the Blocks interface from a 24 hour clock to a 12 hour clock?<br /><br />We could check if the hour is greater than 11, and if so then subtract 12.<br /><br />Or we could use the modulus operator, which gives you the remainder after you do a division.<br /><br />So here, if we divide 17 by 12, we get an answer of 1 with a remainder of 5 (or 1r5). 17:00 in the 24 hour clock is 5:00pm in the 12 hour clock, so that checks out!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-5": "Put the <b>[[current [hour]] mod [12]]</b> in as the LED id in the <b>set LED</b> block.<br /><br />Try running the code by pressing the green flag - Cog will show a single red light that shows where the hour hand would be on a clock!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-6": "We probably want to show more than just the hour on our clock, so let’s figure out how to display the minutes too.<br /><br />The <b>current [minute]</b> block will give you the minute as a number between 0 and 59!<br /><br />Drag it into the code area and click it to see the current minute.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-7": "There’s another problem though, we need to show 60 minutes on only 12 LEDs!<br /><br />On a clock the minute hand makes one rotation every hour, starting at the 12 o’clock position. When the time is 30 minutes past the hour, the minute hand is in the 6 o’clock position, halfway through a rotation.<br /><br />The LEDs on Cog are numbered like the hour marks on a clock. The minute hand moves 5 minutes between each of the numbers on a clock. That makes sense because 60 minutes / 12 numbers = 5 minutes per number.<br /><br />So, if we use the division operator to divide the <b>current [minute]</b> by 5, we’ll know which LED to turn on to show the minute hand on our clock.<br /><br />There’s yet another problem though - just dividing the minute by 5 will normally not give a whole number, and we need to specify the LED as a whole number (or integer).<br /><br />To go from the number with a decimal point to a whole number we need to round it. If just round then Blocks will either round up or down, depending on whether the fraction is below .5, or .5 or above.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-8": "For our clock though, we don’t want the minute hand to move to the next position until the minute hand should be fully there. For example at 5:09pm, we’d still want the minute hand to be at the “1” position.<br /><br />To do that, we’ll need to always round down. There is a way of doing that in Blocks - using the <b>floor</b> operator. You can find that on the operator which says <b>[abs]</b> by default, in the dropdown list.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-9": "Add a block to <b>set LED [[floor] of [[current [minute]] / [5]] to [blue]</b>.<br /><br />Try it out! Press the green flag and now Cog will show the minute hand as a blue light, as well as the hour hand as a red light.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-10": "How would you show the seconds too?<br /><br />Add another <b>Set LED</b> block but this time make it set LED <b>[[floor] of [[current [second]] / [5]] to [green]</b>.<br /><br />Remember that you can right click, or press and hold, a block to get the option to duplicate it - that can save a lot of time.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-11": "Try it out!<br /><br />Now you’ll get three “hands” on the clock - red for hours, blue for minutes, and green for seconds!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-12": "Let’s make it so that the time updates automatically. Add a <b>forever</b> loop and a <b>wait [5] seconds</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-13": "Try it out!<br /><br />Now every 5 seconds the time will update and the hands will move around the clock!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-14": "It’s a bit confusing if the different hands are in the same place, try adding a small pause between each LED, and changing the pause at the end to only 3 seconds.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-15": "Try it out!<br /><br />Now it’ll show the hours, minutes and seconds one at a time.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-16": "It would be cool to be able to show whether it was am or pm too.<br /><br />We could do this by changing the background color of the clock depending on whether the hour is less than 12.<br /><br />Replace the <b>Turn off all LEDs</b> block with an <b>if … else</b> block that checks whether the current hour is < 12.<br /><br />Then choose two different colors to set the ring LEDs for pm and am. In this example we’ve chosen orange for am and purple for pm - the colors must be different from the ones you’re using to show the hands on the clock.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-17": "Try it out!<br /><br />Now your clock will show you whether it’s am or pm by changing color!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-18": "How else could we show the time?<br /><br />This code will show the hour by how turning on all the LEDs from the 12 o’clock position to the current hour - so as the time gets later more LEDs will turn on.<br /><br />Delete your previous clock code and try it out!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-19": "If you have friends who also have a Cog, can you use three of them to show the time - one showing hours, one minutes, and one seconds, like this?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-20": "You could also use one cog to show the hours progressing more slowly, by gradually turning on the next LED as the minutes pass.<br /><br />Delete your previous clock code and try it out!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-21": "Try it out!<br /><br />The LEDs will slowly turn on as time passes - for example in this picture our clock is showing half past 6!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-22": "If you have time, we can try and make our original clock more sophisticated.<br /><br />We can animate the second hand to flash every second, like this - then it won’t matter if it covers up the other hands.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-23": "To do this, we’re going to use a list to keep track of which color each LED should be.<br /><br />Go to the <b>Variables</b> category and click the <b>Make a List</b> button to make a list called <b>leds</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-24": "Lists are special variables that can contain an ordered list of individual variables.<br /><br />Delete your previous code and add the blocks shown in the image.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-25": "Press the green flag to run the code, the <b>leds</b> list will get 12 color codes put in it - one for each LED on Cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-26": "Make two new variables called <b>hour</b> and <b>minute</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-27": "Add blocks to set these variables to the positions of the hour and minute hands, using the same mathematics that you did before.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-28": "Now we’ll change the items in the list to set the colors for the hour and minute hands.<br /><br />The <b>replace item</b> block will change the item at the specified position in the list. Since the list starts numbering its items at 1 we need to add 1 to the hour and minute variables.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-29": "Try running the code by pressing the green flag.<br /><br />Now the list will update with different color codes for the hour and minute hands.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-30": "Let’s make something to cope better when the hour and minute hands are in the same place.<br /><br />Add an <b>if</b> statement to check if the hour and minute variables are the same (i.e. if the hour and minute hands are in the same place).<br /><br />If so, change the item in the list to a different color - in this case we’ve chosen purple by setting red and blue to 255 and green to 0.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-31": "Ok, so we’ve now got a list that represents the colors we’d like to show on the LEDs on Cog - it’s time to display them!<br /><br />Make another variable called <b>ledID</b> and use it in a loop to set the 12 LEDs on Cog.<br /><br />To set the different colors we’ll refer to the items on the <b>leds</b> list using the <b>item</b> block - remembering to add 1.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-32": "Try it out!<br /><br />The 12 color codes in the <b>leds</b> list will be shown as colors on Cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-33": "Let’s put the code into a loop so it updates automatically.<br /><br />Add a <b>wait until</b> block at the end, and set it to wait until the minute hand needs to change, by checking the value of where the minute hand should be against the value stored in the <b>minute</b> variable.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-34": "Then put the code into a <b>forever</b> loop so that it runs repeatedly.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-35": "Now it’s time to add the second hand!<br /><br />We’ll do this in a parallel section of code, so add another <b>when green flag clicked</b> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-36": "Make another variable called <b>second</b>, and set it in the same way we’ve set the second hand position before.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-37": "Now add blocks to set the second hand LED to green, wait for a second, then change it back to the color that’s in the <b>leds</b> list.<br /><br />In this way, we’ve remembered what color the LED should be after we change it. The <b>leds</b> list is being used to remember the state of the hour and minute hands on our clock.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-38": "Put the second hand code in a <b>forever</b> loop too.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-39": "Your code should now look like this - Try it out!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-8.step-40": "Well done!<br /><br />You’ve used a lot of math to make a clock with Cog! You thought about different ways you could display the time.<br /><br />If you made it to the end, you also learned about lists as a way to store ordered information such as the state of each LED on Cog.<br /><br />Next Steps:<ul><li>Can you make this new clock change the background color depending on whether it’s am or pm?</li><li>Would it make more sense if the “second” hand actually rotated once every 5 minutes, to show the time more accurately? What would you change to make that happen?</li></ul>",

  "gui.howtos.lessons.type-lesson-cog-tutorial-9.name": "Trundle Wheel",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.description": "Let’s make a trundle wheel!<br /><br />This is a special wheel that will keep track of how far it’s rolled!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-1": "In previous activities we’ve seen how we can use the accelerometer on Cog to measure which direction Cog is tilting in.<br /><br />We can also use this sensor to figure out the angle that Cog is at.<br /><br />We’ll use that to turn Cog into a trundle wheel - that’s a device for measuring distances by rolling a wheel along them.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-2": "Add a <b>when green flag clicked</b> block and a <b>forever</b> loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-3": "Make a variable called <i>angle</i>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-4": "<b>Set</b> the <b>angle</b> to <b>atan2</b> of [Accelerometer [Y]] and [Accelerometer [X]].<br /><br />You can find the <b>atan2</b> block in the operators category.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-5": "Atan2 is a mathematical function that uses trigonometry to work out the angle inside a right angled triangle when given the lengths of the adjacent and opposite legs.<br /><br />Here, we’re putting in the Y axis and X axis acceleration, which are perpendicular to each other (at 90 degrees), and the atan2 function will tell us the angle.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-6": "Try it out!<br /><br />Press the green flag and then hold Cog vertically with the yellow arrow pointing up, and rotate it around like a steering wheel.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-7": "As you rotate Cog clockwise you’ll see that the angle changes from 0 degrees when cog is pointing up, up to 180 degrees when cog is pointing down.<br /><br />It will then jump to -180 degrees, before increasing back to 0 degrees as you continue rotating clockwise.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-8": "For our trundle wheel we’d prefer if it counted up from 0 to 360 degrees.<br /><br />Add these blocks inside the <b>forever loop</b>:<ul><li><b>If</b> [[angle] < [0]] then</li><ul><li>Change [angle] by [360]</li></ul></ul><br />Now instead of -180 degrees, our angle will be set to +180 degrees.<br /><br />It’ll keep increasing from there up to 360, and then loop back around to 0 degrees.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-9": "Try it out!<br /><br />Now when you rotate cog the angle will go from 0-360 and then loop around.<br /><br />This maths works because 360 degrees is a full turn so when we add an extra 360 degrees to the rotation we end up pointing the same way, but now with a positive angle that will be easier to deal with as we count revolutions.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-10": "Let’s add a sprite on screen to show the rotation of Cog.<br /><br />From the <i>Choose a Sprite</i> menu select the <i>paint</i> option.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-11": "Let’s draw a sprite to represent Cog!<br /><br />Start off by adding a circle, and then use the line tool to make a hexagon around it.<br /><br />The circle is just a guide to help us get the hexagon right - don’t worry if your hexagon isn’t perfect!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-12": "Delete the circle, and replace it with a smaller circle in the middle to represent the button on Cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-13": "And finally draw a triangle using the Line tool, and color it yellow.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-14": "Click the <i>Code</i> tab to go back to the coding screen.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-15": "With the sprite selected, add these blocks:<ul><li>When green flag clicked</li><li>Forever</li><ul><li>Point in direction [angle]</li></ul>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-16": "Try it out!<br /><br />Press the green flag and then rotate cog - you’ll see the sprite rotate too!<br /><br />There’s a problem though - the sprite is 90 degrees off from Cog - that’s because the Blocks interface counts point left as being 0 degrees, whereas we’re treating pointing up as being 0 degrees.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-17": "To convert between these different conventions, change the code to add 90 degrees to the angle.<br /><br />Try it again and the movement of the cog sprite will match that of your real life cog!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-18": "Select Cog again.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-19": "Let’s add an LED on Cog to show that the rotation sensing is working.<br /><br />Add 2 new variables called <i>LED</i> and <i>lastLED</i>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-20": "Our angle variable is telling us a rotation from 0 to 360 degrees, but we only have 12 LEDs around the ring on cog.<br /><br />That means the resolution will be 30 degrees per LED, since 360 degrees / 12 LEDs = 30 degrees / LED.<br /><br />Add these blocks inside the <b>forever loop</b>:<ul><li>Set [LED] to [[round [angle]/[30]] mod [12]]</li></ul><br />We divide the angle by 30 to get a number between 0 and 12, and then round it since we need a whole number (or integer) to specify which LED we’ll light up.<br /><br />Then, since our LEDs are only numbered from 0 to 11, we use the mod block like we did in the clock activity. This is the <i>modulus operator</i> and returns the remainder when the two numbers are divided - so instead of getting a number 12 for the LED id, we’ll get a 0 again instead - which is what we want because LED 0 is at the 12 o’clock position on cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-21": "Now add these blocks inside the <b>forever loop</b> as well:<ul><li>If [not [[LED] = [lastLED]]] then</li><ul><li>Set LED [LED] to [blue]</li><li>Set LED [lastLED] to [black]</li><li>Set [lastLED] to [LED]</li></ul></ul><br />Can you figure out how that new section of code works and what it will do?<br /><br />We’re using the LED and lastLED variables to keep track of which LED is lit, and whether we need to change it. When the value of LED changes from one iteration of the loop to the next, the condition in the if statement will be true.<br /><br />When that happens, we turn on the new LED, and turn off the old one (by setting it to black, which is the same as being off for a light). Finally, we update the lastLED variable so that it’s set for the next time around the loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-22": "Try it out!<br /><br />Press the green flag and then rotate cog.<br /><br />You’ll notice that something funny is happening! Sometimes the LED that’s on is at the top, and sometimes it’s at the bottom!<br /><br />That’s a bit confusing, and not what we were going for.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-23": "If you think about it, that’s because the LED is rotating clockwise at the same time as we’re rotation cog clockwise.<br /><br />What we actually want, for the LED to always be at the bottom of cog, is for it to rotate in the opposite direction to how we’re rotating cog.<br /><br />How could we make that happen?<br /><br />Change your code so that it says <b>set [LED] to [[round [[360] - [angle]] / [30]] mod [12]]</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-24": "Try it out!<br /><br />Now when you rotate cog, the LED will always be at the top!<br /><br />When we subtract the [angle] variable from 360, what we’re effectively doing is flipping which direction we’re rotating around the circle.<br /><br />For example, if we rotate 10 degrees clockwise from 0, we’ll be at 10 degrees. If we rotate 10 degrees anticlockwise from 0, we’ll be at 350 degrees.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-25": "That’s pretty close, but it’s still not quite what we were going for. It would be more intuitive if the LED was at the bottom of cog, rather than the top.<br /><br />How could we do that?<br /><br />Basically we need to add 6 to the LED variable - and just like adding 6 hours will rotate the hour hand halfway around a clock face, adding 6 to the LED variable will rotate halfway around the ring of 12 LEDs.<br /><br />We will be relying on the mod operator to loop the numbers around from 11->0.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-26": "Try it out!<br /><br />Now when you rotate cog the LED that’s on will be at the bottom.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-27": "Ok! Now we’ve got some good user feedback that the rotation sensing is working, let’s make cog measure distance!<br /><br />For this next bit, you’ll need a card circle - this will be our wheel.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-28": "Trace around the upper face of cog, and then cut out a hexagon in the middle of the circle.<br /><br />(you don’t need to be perfectly in the middle)<br /><br />Measure the diameter of your circle.<br /><br />The one here is about 200mm diameter, which means the radius is 100mm.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-29": "Let’s plug that number into our program.<br /><br />Make two new variables called <i>radius</i> and <i>circumference</i>.<br /><br />Add new blocks to set them before the forever loop:<ul><li>Set [radius] to [100]</li><li>Set [circumference] tp [2] * [[3.14] * [radius]]]</li></ul><br />Replace the 100 there with whatever the radius of your wheel is.<br /><br />We’ll be measuring the distance covered as the wheel turns, where each revolution of the wheel will cover a distance equal to the circumference of the wheel.<br /><br />Remember that the circumference is equal to 2 * pi * radius. Here we’re approximating pi as 3.14.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-30": "We’ll need a few more variables to help us calculate the distance travelled.<br /><br />Make these new variables:<ul><li>lastAngle - we’ll use that to track what the angle was the last time around the forever loop, like we did with the lastLED variable</li><li>revolutions - we’ll use that to keep track of how many complete revolutions there have been of the wheel</li><li>totalRotation - we’ll add up the complete and partial revolutions to get the total amount rotated in degrees</li><li>distance - we’ll convert that total rotation into a distance</li></ul>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-31": "To let us count the number of revolutions, we’ll need to keep track of when the angle changes from 360 -> 0, and vice versa.<br /><br />We’ll use the lastAngle variable for this. When the angle goes from 360 to 0 degrees the result of [angle] - [lastAngle] will be -360.<br /><br />In practice our measurement will probably jump from something like 355 -> 5 degrees.<br /><br />Add these blocks inside the <b>forever loop</b>:<ul><li>If [[angle] - [lastAngle] < [-180]] then</li><ul><li>Change [revolutions] by [1]</li></ul></ul><br />So, if the angle decreases by a lot (180 degrees or more) suddenly, we’ll know that we should add 1 to the revolutions count.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-32": "We also need to track revolutions in the opposite direction. When that happens, the angle will jump from 0 -> 360 degrees.<br /><br />Add these blocks inside the <b>forever loop</b>:<ul><li>If [[angle] - [lastAngle]] > [180]] then</li><ul><li>Change [revolutions] by [-1]</li></ul></ul><br />That means that if the angle jumps up a lot suddenly, we’ll decrease the revolutions count by 1.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-33": "Add a <b>set [lastAngle] to [angle]</b> block inside the <b>forever loop</b>.<br /><br />That will get the lastAngle variable ready for the next time around the loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-34": "Now it’s time to work out the distance the wheel has rolled!<br /><br />Add this block inside the <b>forever loop</b>:<ul><li>Set [totalRotation] to [[[revolutions] * [360]] + [[angle]]]</li></ul><br />This will add 360 degrees for every rotation to the current angle measurement, to get the total rotation.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-35": "Now add this block:<ul><li>Set [distance] to [[[totalRotation] / [360]] * [circumference]]</li></ul><br />The totalRotation variable gives the total rotation in degrees, so by dividing it by 360 we get the number of revolutions as a rational number - one that can have things after the decimal point rather than just whole numbers.<br /><br />Multiplying that by the circumference tells us the total distance the wheel has rolled!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-36": "Try it out!<br /><br />Put cog inside the cardboard wheel and try rolling it along!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-37": "It would be great to have a way to easily reset the distance counter.<br /><br />Add these blocks:<ul><li>On button press</li><li>Set [distance] to [0]</li><li>Set [revolutions] to [0]</li><li>Set [startingAngle] to [angle]</li><li>Set [lastAngle] to [angle]</li></ul><br />You’ll need to make a new variable called <i>startingAngle</i>.<br /><br />We’ll use that to make sure that we can start counting from whatever angle cog is at when you push the button, not just when cog is pointing up.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-38": "We’ll need to factor the startingAngle into our calculation of the total rotation, by subtracting it from the current angle.<br /><br />Change the block that sets the totalRotation variable to:<ul><li>Set [totalRotation] to [[[revolutions] * [360]] + [[angle] - [startingAngle]]]</li></ul><br />This will subtract the starting angle from the current angle, so that we can start counting from whatever angle cog is at when you push the button.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-39": "Try it out!<br /><br />Get a ruler and put your cog trundlewheel next to it at the 0 mark.<br /><br />Push the button to reset cog, and then rotate the wheel along the ruler - you should find that the distance variable keeps track of how far you’ve rolled.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-40": "You might have noticed that in the last video there was a list of distances.<br /><br />To make that, click the <b>Make a List</b> button and make a list called <i>distances</i>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-41": "Then, add an <b>add [distance] to [distances]</b> block just after the on button press block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-42": "Try it out!<br /><br />You can measure distances and push the button to record them into the list to look at when you get back to your screen.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-9.step-43": "Well done!<br /><br />You’ve learned how to turn cog into a device for measuring distances! In real life, trundle wheels are used to measure long distances, and you get ones with handles that you can roll along.<br /><br />You used some maths to convert the diameter that you measured into a radius and then a circumference, and used that along with the angle measurement to calculate the distance.<br /><br />You thought a lot about angles, and used a variable to keep track of how the angle of cog was changing, and conditionals to record how the number of total revolutions changed.",

  "gui.howtos.lessons.type-lesson-cog-tutorial-10.name": "Flying Bat Game",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.description": "Let’s make another game!<br /><br />This time we’ll make a game about a fruit bat that’s quite picky about what it eats.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-1": "Let's make another game!<br /><br />This time we’ll make a game about a fruit bat that’s quite picky about what it eats.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-2": "We’ll make the bat fly left and right using the tilt sensing on cog again.<br /><br />As you’ve done before, make a variable called <b>ay</b>.<br /><br />We’ll also be keeping score in this game, so make a variable called <b>score</b> too.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-3": "Add these blocks:<ul><li>When green flag clicked</li><ul><li>Set score to [0]</li><li>Forever</li><ul><li>Set [ay] to [Accelerometer [Y]]</li><li>Broadcast [update position]</li></ul></ul></ul><br />They will:<ul><li>Let the user start the game by pressing the green flag</li><li>Reset the score when the game starts</li><li>Update the ay variable to the value of the accelerometer Y axis in a loop, and broadcast the update position message</li></ul><br />We’ll use the <b>ay</b> variable and the <b>update position</b> message to change the position of our sprite.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-4": "Let’s add the sprite now.<br /><br />Press the <b>Choose a Sprite</b> button and then select the Bat sprite.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-5": "With the Bat sprite selected, add these blocks:<ul><li>When I receive [update position]</li><ul><li>Set x to [[ay] * 200]</li></ul></ul><br />This means that every time the <b>ay</b> variable is updated, we’ll move the position of the bat too.<br /><br />The ay variable will mostly vary between -1 and 1, so by multiplying by 200 we’ll set the x position to be between -200 and 200.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-6": "Try it out!<br /><br />Press the green flag, and then tilt cog from side to side, the bat will move too!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-7": "Let’s make our bat a little smaller, and make it fall down the screen by default.<br /><br />Add these blocks:<ul><li>When green flag clicked</li><li>Set size to [50]%</li><li>Forever</li><ul><li>Change y by [-10]</li><li>Wait [0.1] seconds</li></ul></ul></ul><br />Now when you press the green flag and run the program the bat will slowly fall down the screen!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-8": "Let’s make a way for the bat to flap its wings and climb again.<br /><br />Select Cog again.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-9": "Add these blocks:<ul><li>On object sensed [right]</li><li>Broadcast [flap]</li></ul><br />We’ll use the right IR object sensor to be the button for making the bat flap its wings, and we’ll use a new message called <b>flap</b> to send that instruction to the bat sprite.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-10": "Select the Bat sprite.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-11": "Find the next costume block in the Looks category.<br /><br />Try clicking on it - you should see that the sprite of the bat changes to one in a different pose!<br /><br />Click on it a few times - the Bat sprite has four different poses, which are called costumes in the Blocks interface.<br /><br />We can use these costumes to animate movements on the bat.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-12": "Add these blocks:<ul><li>When I receive flap</li><li>Repeat [4]</li><ul><li>Next costume</li><li>Change y by [10]</li></ul></ul><br />Since the bat has four costumes, we’ll do this loop 4 times to cycle through them all.<br /><br />At the same time, we’ll move the bat up the screen so that it floats up as it flaps its wings.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-13": "We should also make sure that the costume always starts with the right one at the start of the game.<br /><br />Add a switch costume to [bat-a] block just after the set size to [50]% block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-14": "Try it out!<br /><br />Press the green flag to start the code, and then try tapping the right IR object sensor with your finger - the bat will fly up the screen!<br /><br />You can still tilt left and right to steer.<br /><br />Press the red stop sign to stop the code running.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-15": "Let’s add a more fun backdrop too - bats often live in the woods and like night time, so let’s add a forest background.<br /><br />Click the <b>Choose a Backdrop</b> button.<br /><br />Then select the Woods backdrop.<br /><br />Now you can fly your bat through the woods!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-16": "Ok - it’s time to make this more of a game!<br /><br />Let’s start by making a shopping list for our bat.<br /><br />Go to the <i>Variables</i> category and click the <b>Make a List</b> button.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-17": "Our bat is a fruit bat, and they like to eat fruit!<br /><br />Make a list called <b>fruit</b>.<br /><br />An empty list will appear on the screen.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-18": "We can add things to the list using the new blocks that have appeared in the variables section.<br /><br />First off, we need to make sure that the bat has an empty list when the game starts.<br /><br />Add these blocks:<ul><li>When green flag clicked</li><li>Delete all of [fruit]</li></ul>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-19": "Next we’ll add a couple of fruits to our bat’s shopping list.<br /><br />Add an <b>add [thing] to [fruit]</b> block, and change it to say <b>add [banana] to [fruit]</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-20": "Do the same again to add an <b>apple</b> to the list.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-21": "Press the green flag, now you’ll see that the banana and apple items are added to the fruit list!<br /><br />At the bottom it also tells you that the length of the list is 2 items.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-22": "Let’s get the bat to pick something that it wants off the shopping list.<br /><br />Make a new variable called <b>fruit</b>.<br /><br />You’ll note that you can have a variable called fruit and a list called fruit.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-23": "Find the <b>item [1] of [fruit]</b> block and drag it to the coding area.<br /><br />If you press on it you’ll see that it returns (outputs) the item that’s at the specified position in the list - in this case banana.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-24": "Find the <b>length of [fruit]</b> block and drag it to the coding area.<br /><br />If you press on it you’ll see that it returns the number of items in the list - in this case 2.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-25": "If you combine those two blocks together so they say <b>item [length of [fruit]] of [fruit]</b>, it will find the last item in the list.<br /><br />That’s because the <b>length of [fruit]</b> block is evaluated first, and returns a value of 2, like you saw before. The <b>item</b> block is evaluated next, and takes that number 2 as an input, and then returns the second item in the list.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-26": "How could we make the code pick a random item off the list?<br /><br />Use the <b>pick random</b> block from the Operators category and set it to pick a random number between 1 and <b>length of [fruit]</b>. Then put the whole random block into the <b>item</b> block, like this:<br /><br />When you press that, you’ll see that it randomly chooses either banana or apple.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-27": "Add these blocks below the <b>add [apple] to [fruit]</b> block:<ul><li>Repeat [10]</li><ul><li>Set [fruit] to [item [pick random [1] to [length of [fruit]]] of [fruit]]</li><li>Broadcast [show fruit]</li><li>Think [fruit] for [5] seconds</li></ul></ul><br />You can find the think block in the Looks section, and can add the fruit variable to it.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-28": "Try it out!<br /><br />Now every 5 seconds the bat will pick a fruit at random to think about!<br /><br />The code will also send the <b>show fruit</b> message, which we’ll use shortly.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-29": "Let’s add those fruit into our game.<br /><br />Click the <b>Choose a sprite</b> button and select the Bananas sprite.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-30": "Drag the bananas to a better place on the screen.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-31": "With the bananas selected, add these blocks:<ul><li>When green flag clicked</li><li>Forever</li><ul><li>If [touching [Bat]] then</li></ul></ul><br />This code will also run when the game is started, and will check to see if the bat is touching the bananas.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-32": "If the bat has reached the bananas, we want to check whether that was the fruit it wanted to get.<br /><br />Add an <b>if … else</b> condition nested inside the if block, and set the condition to <b>[fruit] = [banana]</b>, where fruit is the variable you created before.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-33": "If the fruit is correct, we’ll increase the score by 1 and send the correct message.<br /><br />Otherwise, we’ll decrease the score by 1 and send the incorrect message.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-34": "To avoid scoring (or losing!) points more than once, we’ll make the bananas hide once the bat has reached them.<br /><br />Add a <b>hide</b> block after the if… else block - that means the bananas will always hide when the bat touches them.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-35": "Since we’re hiding the bananas, we need to have a way of showing them again.<br /><br />Previously we added code to send a <b>show fruit</b> message every time the bat picks a new fruit. We’ll use that as a signal to show the fruit.<br /><br />Add these blocks:<ul><li>When I receive [show fruit]</li><li>Show</li></ul><br />Now when the bat picks a new fruit, the bananas will show again.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-36": "Add another sprite - this time the Apple sprite.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-37": "Move the apple sprite to be on the other side of the stage.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-38": "Copy the code from the Bananas to the Apple sprite by dragging it to the Apple sprite.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-39": "With the Apple sprite selected, change the code so that it checks if the fruit variable is equal to <b>apple</b> instead.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-40": "Try it out!<br /><br />Press the green flag to start, then try to collect the fruit that the bat is thinking of!<br /><br />Press the red stop sign to stop the code when you’re done.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-41": "Let’s add some feedback about whether you get the correct fruit.<br /><br />Select Cog again.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-42": "Add these blocks:<ul><li>When I receive [correct]</li><li>Set [ring] LEDs to [green]</li><li>Play note [C6] for [0.5] seconds</li><li>Turn off all LEDs</li></ul><br />And<br /><br /><ul><li>Set [ring] LEDs to [red]</li><li>When I receive [incorrect]</li><li>Play note [C4] for [0.5] seconds</li><li>Turn off all LEDs</li></ul><br />These will use the correct and incorrect messages that you coded before for the fruits, and make Cog light up and play a sound whenever you collect a fruit.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-43": "Try it out!<br /><br />Now you’ll get feedback from Cog as you collect fruit.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-10.step-44": "Well done!<br /><br />You’ve learned how to use costumes in Blocks to animate sprites.<br /><br />You also learned how to make a list and choose items from it, and use those as part of a game.<br /><br />Next steps:<ul><li>Can you add more fruits?</li><li>Can you add something which the bat never wants to eat?</li><li>Can you make the game get more difficult as time passes?</li><li>Can you get Cog to display the score at the end?</li></ul>",

  "gui.howtos.lessons.type-lesson-cog-tutorial-11.name": "Interval Timer Stopwatch",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.description": "Let’s make a stopwatch with a lap timer!<br /><br />This is a special stopwatch that will keep track of as many lap times as we want<br />We’ll use a list to store these.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-1": "Let’s make a stopwatch with a lap timer!<br /><br />This is a special stopwatch that will keep track of as many lap times as we want<br />We’ll use a list to store these.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-2": "Start off by making a list called <b>times</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-3": "Add these blocks:<br /><ul><li>On button press</li><li>Add <b>timer</b> to <b>times</b></li><li>Reset timer</li></ul>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-4": "Push the button on cog - every time you push it a new time will be added to the list!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-5": "There are a couple of problems though, the first time that we added was a bit random as we hadn’t set up the timer first.<br /><br />We also have no way of stopping the timer and clearing the list of lap times.<br /><br />Let’s fix that!<br /><br />Add a variable called <b>started</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-6": "We’ll make shaking cog stop the timer running.<br /><br />Add these blocks:<br /><ul><li>On shake</li><li>Set <b>started</b> to <b>false</b></li></ul>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-7": "Now let’s change what the button does based on the state of the stopwatch - i.e. depending on whether it is started or not.<br /><br />Change the code under the <b>on button press</b> block to be:<br /><ul><li>On button press</li><li>If <b>started</b> = <b>true</b> then</li><ul><li>Add <b>timer</b> to <b>times</b></li></ul><li>Else</li><ul><li>Delete all of <b>times</b></li></ul><li>Reset timer</li></ul><br />So, if the stopwatch has been started then the lap time will be added to the list. If not, the list of old times will be cleared ready to start a new list.<br /><br />In both cases the timer will be reset, ready to record the next lap time.<br /><br />Can you spot what’s missing from this code?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-8": "Well done if you spotted that we also need to set the <b>started</b> variable to <b>true</b> once the stopwatch has been started!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-9": "Shake cog to reset everything, then push the button to start the timer - that will clear the old times from the list and reset the timer.<br /><br />Every time you push the button after that a new time will be added to the list!<br /><br />If you shake cog again after the last time has been recorded you’ll reset it so that the next button push will start a new set of times.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-10": "That works well as a stopwatch!<br /><br />But it’s a little tricky for our users to know what state the stopwatch is in - is it started or stopped?<br /><br />Let’s add some feedback for that.<br /><br />In the <b>on shake</b> blocks, under the <b>set started to false</b> block, add these blocks:<br /><ul><li>Turn off all LEDs</li><li>Set <b>button</b> LEDs to <b>red</b></li></ul><br />Now whenever you shake cog to reset it, it’ll stop whatever the LEDs were doing and just light the button up showing that it’s stopped and ready to be started.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-11": "We also need to add feedback to show when the button is successfully pushed and when the stopwatch is running.<br /><br />At the end of the <b>on button press</b> blocks, add these blocks:<br /><ul><li>Set <b>ring</b> LEDs to <b>green</b></li><li>Play note <b>C6</b> for <b>0.5</b> seconds</li><li>Set <b>ring</b> LEDs to <b>blue</b></li><li>Set <b>ring</b> LEDs to pattern <b>Spin1</b></li></ul><br />Now whenever you press the button you’ll get a confirmatory noise and the light will flash green, before they start spinning blue to indicate that the stopwatch is running.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-12": "Try it out!<br /><br />It’s much easier now to see whether the stopwatch is stopped or started.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-13": "Can you spot the bug in our code though?<br /><br />What happens if you try and record times less than 0.5 seconds?<br /><br />You won’t be able to - because the code from the previous button press will still be executing and playing the note.<br /><br />How could we fix this, while still playing the note for 0.5 seconds?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-14": "One way of fixing this is to use the broadcast block to send a message to trigger the lights and sound instead.<br /><br />Remember how the broadcast and wait block wouldn’t finish executing until all the code that it triggered was finished? The broadcast block doesn’t do that, so as soon as it has sent the button push message it will finish executing.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-15": "Try it out!<br /><br />It’s much easier now to see whether the stopwatch is stopped or started.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-16": "Cool, now our stopwatch is working pretty well!<br /><br />Often when we’re doing circuits we want to know our average time. Let’s make our stopwatch calculate that too!<br /><br />Add two variables, one called <b>average</b> and once called <b>counter</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-17": "We’ll calculate the average after we stop the stopwatch by shaking cog.<br /><br />Add these blocks below the <b>Set button LEDs to red</b> block:<br /><ul><li>Set <b>average</b> to 0</li><li>Set <b>counter</b> to 0</li></ul><br />That will get our variables ready for calculating the average.<br /><br />Have a think now about how you’d work out the average of a list of numbers?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-18": "To get the average you add up all the numbers in the list, and then divide by the number of items.<br /><br />We’ll iterate through the list using a repeat loop, and add up all the items.<br /><br />Add a repeat block and set the number of repeats to <b>length of times</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-19": "We’ll use the counter variable to keep track of where we are in the list as we add up all the times.<br /><br />Inside the repeat loop add a block to <b>change counter by 1</b>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-20": "In blocks, the first item on the list is item 1, so on the first time through the repeat loop the counter variable will be changed from 0 to 1. On the second time through the loop it’ll be changed to 2, etc.<br /><br />We’ll then use that counter to increase the average variable by the next number in the list.<br /><br />Add the block <b>change average by item counter of times</b>.<br /><br />When the repeat loop has finished, it will have iterated through every item in the list, and added each number to the average variable.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-21": "Ok, it’s going well, but now the average variable is actually storing the sum of all our times.<br /><br />To get the average we’ll need to divide it by the number of items in the list.<br /><br />Add a <b>set average to [average / counter]</b> block.<br /><br />The counter variable is currently set to have counted how many items were in the list, so we can use it as the divisor to get the average.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-22": "Try it out!<br /><br />Now when you shake cog the average variable will be set to the average of all the times you recorded!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-11.step-23": "Well done!<br /><br />You’ve made a very fancy stopwatch that can record loads of lap times, tell you how many lap times it’s recorded, and even calculate the average for you!<br /><br />What could you use the lap timer to time?<br /><br />Can you use the lights on cog to give more feedback when the stopwatch is running? Maybe show seconds passing by turning on LEDs on cog?",

  "gui.howtos.lessons.type-lesson-cog-tutorial-13.name": "Quiz Game",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.description": "Let’s make a quiz game!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-1": "Let’s make a quiz game! <br/><br/>We’ll put in a list of questions and answers, and use cogs as buzzers for contestants. <br/><br/>This activity uses multiple Cogs connected to one program. If possible, take turns to share cogs between small groups to run the program. <br/><br/>If you only have access to one cog, think about how you could change the code to use the IR sensors on cog as buzzers too, to let three people play on one cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-2": "Let’s begin by getting things set up for the quiz. <br/><br/>We’ll need a sprite to act as the host - pick you favourite one from the options, this example will use a crab but you could use any sprite, or draw your own.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-3": "We’ll need to make three lists - one for <i>questions</i>, one for <i>answers</i>, and one to track the <i>scores</i> of the contestants. <br/><br/>Add three lists called questions, answers and scores.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-4": "Add these blocks to fill in the list of questions. <br/><ul><li>When green flag clicked</li><li>Delete all of [questions]</li><li>Add [What is 2+2?] to [questions]</li></ul>Put in as many questions as you’d like by adding more <i>add [] to [questions]</i> blocks. <br/><br/>Then do the same thing for the answers, making sure that your questions line up with your answers.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-5": "Try it out by pressing the green flag. <br/><br/>The questions and answers lists will fill in - take a minute to check that the answers all correspond to the right questions. <br/><br/>Once you’re happy, click the checkboxes next to the answers and questions lists to hide them.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-6": "Now let’s get the scoreboard ready. <br/><br/>Make a new variable called <i>number of players</i>, and add these blocks: <ul><li>When green flag clicked</li><li>Set [number of players] to [2]</li><li>Delete all of [scores]</li><li>Repeat [number of players]</li><ul><li>Add [0] to scores</li></ul>Change the setting for number of players to the number you intend to have - you can always change it again later.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-7": "We'll iterate through the list of questions and have the sprite ask each of them. <br/><br/>To do this we’ll use a repeat loop. Add these blocks: <ul><li>When green flag clicked</li><li>Repeat [length of [questions]]</li></ul>There’s a slight problem though - what if that code we’ve just run is executed before the other code fills in the list of questions? <br/><br/>It’s a bit uncertain what exactly would happen - this is another type of bug, and we can code things a bit differently ensure the code runs in the order we want.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-8": "We could just add a wait block before the repeat loop, but that’s not very neat. <br/><br/>We could also add all the code into one big long sequence, but that will become quite difficult to manage. <br/><br/>Alternatively, we can make our own blocks and make sure we run them in the order we want. <br/><br/>Click the Make a Block button.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-9": "Give the block the title <i>Fill in questions</i>, and click OK.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-10": "A new block will appear in the block palette, and in the coding area you’ll see a hat block titled <i>define [fill in questions]</i>. <br/><br/>Whatever code we put under that block will be run whenever we call the <i>Fill in questions</i> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-11": "Replace the <i>When green flag clicked</i> block with the new <i>define [Fill in questions]</i> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-12": "Put the new <i>Fill in questions</i> block before the repeat loop. <br/><br/>Now, we know for sure that the questions list will be filled in before we evaluate its length and start iterating through it.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-13": "Inside the repeat loop, add these blocks: <ul><li>Say [item [1] of [questions]] for [2] seconds</li><li>Broadcast [answer now]</li><li>Delete [1] of [questions]</li><li>Delete [1] of [answers]</li></ul>After each question has been asked, both it and its answer will be removed from their lists.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-14": "Try it out - the sprite will read out the questions one by one. <br/><br/>You might need to move the sprite to the bottom left corner of the screen to give more room for the questions.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-15": "Let’s add a way to buzz in and answer the question. <br/><br/>Select Cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-16": "Make a new variable called <i>player number</i>. <br/><br/>This time, be sure to select the <i>For this sprite only</i> option. <br/><br/>This new variable will be what we call a <b>local variable</b>, it’s only available for this sprite (or this cog, in this case). <br/><br/>If you change back to the sprite the variable will disappear from the variable list in the block palette, and will reappear when you select cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-17": "Add these blocks: <ul><li>When green flag clicked</li><li>Set [player number] to [1]</li></ul>Later on, we’ll add more cogs, and set their player numbers differently.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-18": "We only want to enable the buzzers when a question has been asked, so we’ll use the <i>answer now</i> message that was broadcast when the sprite asked a question. <br/><br/>Add these blocks: <ul><li>When I receive [answer now]</li><li>Set [ring] LEDs to [blue]</li><li>Set [ring] LEDs to pattern [Spin1]</li><li>Wait until [[[button clicked] = [true]] or [[buzzer] > [0]]]]</li></ul>You’ll need to make a new variable called <b>buzzer</b> - we’ll use this to track which buzzer is pushed first. <br/><br/>You can find the <i>or</i> block in the Operators category. <br/><br/>The condition in the wait until block is either that the button is clicked or the buzzer variable is greater than 0. <br/><br/>That way, we can wait until either the button on this cog is pressed, or a different buzzer is pressed and the buzzer variable is set elsewhere.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-19": "Add these blocks: <ul><li>If [[button clicked] = [true]] then</li><ul><li>Set [buzzer] to [player number]</li><li>Set [ring] LEDs to [green]</li></ul>Else</li><ul><li>Turn off all LEDs</li></ul></ul>With this code, if it was the button on this cog that was pressed first, we’ll set the <i>buzzer</i> variable to this <i>player number</i>, and turn the lights on cog green. <br/><br/>Otherwise, it’ll mean that someone else got there first, or we ran out of time, and we will just turn the lights off instead.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-20": "Go back to the sprite you added before.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-21": "Change the code so that inside the repeat loop for the questions it says: <ul><li>Set [buzzer] to [0]</li><li>Reset timer</li><li>Say [item [1] of [questions]</li><li>Broadcast [answer now]</li><li>Wait until [[[buzzer] > [0]] or [[timer] > [10]]]</li><li>Delete [1] of [questions]</li><li>Delete [1] of [answers]</li></ul>We’ve used another <i>wait until</i> with an <i>or</i> condition. <br/><br/>Now, each time after asking a question the code will wait either for the buzzer variable to be set, or for 10 seconds to elapse.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-22": "Now every time when a question is asked it’ll proceed to the next one either after 10 seconds or as soon as a buzzer (the button on cog) is pushed. <br/><br/>We still need to give our contestant a chance to actually answer the question before moving on to the next one. <br/><br/>Make a new block called <i>check answer</i> and put it after the <i>wait until</i> block.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-23": "Under the <i>define [check answer]</i> block, add an <i>if … else</i> block with the condition <i>[buzzer] > [0]</i>. <br/><br/>This will check whether a buzzer was pushed in time or not.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-24": "If the buzzer is pushed, we’ll give the person who pushed it a few seconds to answer the question. <br/><br/>Add these blocks inside the if condition: <ul><li>Broadcast [buzzed]</li><li>Say [join [Yes, player number] [buzzer]] for [6] seconds</li></ul>The <i>join</i> block can be found in the Operators category, it joins together two lumps (or strings) of text.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-25": "Add these blocks in too: <ul><li>Say [join [join [Did you say] [item [1] of [answers]] [? Press green for yes and red for no]]</li><li>Broadcast [confirm answer] and wait</li></ul>Remember how we’ve previously <i>nested if</i> conditions, you can also <i>nest join</i> operators if you want to join together more than two strings of text. <br/><br/>So, after giving 6 seconds for the player to say their answer out load for the other contestants to hear, the sprite will ask them if they said the correct answer, taken from the answers list. It will then ask them to press green for yes and red for no, send the <i>confirm answer</i> message and wait before proceeding.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-26": "Let’s do something with the <i>confirm answer</i> message. <br/><br/>Select Cog again.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-27": "Add these blocks: <ul><li>When I receive [confirm answer]</li><li>If [[buzzer] = [player number] then</li></ul>. <br/><br/>Later on we’ll have more cogs connected and running this code. This if condition will check if it was this cog that was the successful buzzer.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-28": "Add a <i>set LEDs</i> using the ColorPicker block inside the if condition and set it to show a red LED beside the left IR object sensor, and a green one beside the right IR object sensor.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-29": "Add these blocks: <ul><li>Wait until [[[obstacle sensed [left]] = [true]] or [[obstacle sensed [right]] = [true]]]</li><li>If [[obstacle sensed [right]] = [true]] then</li></ul>Replace item [player number] of [scores] with [[item [1] of [scores]] + [1]]<br/><br/>Else<br/><ul><li>Replace item [player number] of [scores] with [[item [1] of [scores]] - [1]]</li></ul>Turn off all LEDs. <br/><br/>The <i>wait until</i> block will wait until either the left or right IR sensors sense an object - this is where we’re waiting for the player to select whether they got the answer right or wrong. <br/><br/>If they got it right they’ll have covered the right IR sensor, since that’s where we put the green light. <br/><br/>If so, we’ll replace their score on the scoreboard with the same number plus 1. <br/><br/>If not, we’ll replace their score on the scoreboard with the same number minus 1. <br/><br/>In this way we’ll increment their score if they get the question right, and decrement it if they get it wrong. <br/><br/>So be careful - if you buzz in but don’t know the answer you’ll lose points!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-30": "We should also add a countdown so the player knows how long they have to answer. <br/><br/>We’ll use the <i>buzzed</i> message that we set up before to do this. <br/><br/>Make another variable called <i>ledID</i>, and again make it <i>For this sprite only</i>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-31": "Add these blocks: <ul><li>When I receive [buzzed]</li><li>If [[buzzer] = [player number]] then</li><ul><li>Set [ledID] to [0]</li><li>Repeat [6]</li><ul><li>Set LED [ledID] to [purple]</li><li>Set LED [[ledID] + [1]] to [purple]</li><li>Wait [1] seconds</li><li>Change [ledID] by [2]</li></ul></ul></ul>Now during the 6 seconds the player is given to answer the question, they’ll see a countdown on the LEDs on cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-32": "Try it out! <br/><br/>The questions will be asked one after another. If you buzz in you’ll get 6 seconds to answer while cog shows a countdown, and then you’ll be asked to select red or green depending on whether you got the question wrong or right.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-33": "We still need to do something if no-one buzzes in in time for a question, and we need to say who the winner is at the end. <br/><br/>Go back to the sprite.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-34": "In the empty <i>else</i> condition in the <i>check answer</i> definition, add these blocks: <ul><li>Say [Too slow!] for [2] seconds</li><li>Say [join [The answer was] [item [1] of [answers]] for [5] seconds</li></ul>This way, if no-one buzzes in time, the sprite will read out the correct answer for everyone.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-35": "It's time to add more cogs in so we can have more players!<br/><br/>Right click on cog and select <i>duplicate</i>.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-36": "A new cog has been added with the same code as the first!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-37": "As well as the code being duplicated, the <i>local</i> variables we made will have been as well. <br/><br/>With this new cog selected, change the player number to 2.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-38": "Connect a second cog and try it out!<br/><br/>Now whichever cog buzzes first after a question was asked will get the chance to answer<br/><br/>You can add more players by duplicating cog more times!<br/><br/>Remember to update the <i>player number</i> variable on each cog<br/><br/>You’ll also need to set the number of players variable to match the <i>number</i> of players",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-39": "Ok!<br/><br/>Now we need to work out who the winner is at the end of the quiz. <br/><br/>Go back to the sprite code <br/><br/>Make another block called <i>announce winners</i>, and call it after the main question loop",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-40": "Firstly, we'll work out what the highest score is. <br/><br/>Make another block called <i>find max score</i>. <br/><br/> Under the <i>define [find max score]</i> block, add these blocks:<ul><li>set [maxScore] to [item [1] of [scores]]</li><li>set [playerID] to [1]</li><li>repeat [length of [scores]]</li><ul>if [[item [playerID] of [scores]] > [maxScore]] then</li><ul><li>set [maxScore] to [item [playerID] of [scores]]</li><ul><li>change [playerID] by [1]</li></ul></li></ul></li></ul><br/><br/> You'll need to make the <i>maxScore</i> and <i>playerID</i> variables. <br/><br/>This code will <li>iterate</li> through the scoreboard - step through it one entry at a time - and will set the <i>maxScore</i> variable to the highest score it finds along the way.<br/><br/>Click on that section of code to run it - the <i>maxScore</i> variable should end up set to whatever the highest value is in the scores list",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-41": "Now we know what the highest score is, we need to know how many players got that score. <br/><br/>Make another new block called <i>how many players with score [score]</i> - you can do this by pressing the <i>Add an input number or text</i> button in the Make a Block window.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-42": "Add these blocks to the <i>define [how many players with score [score]]</i> block:<ul><li>set [result] to [0]</li><li>set [playerID] to [0]</li><li>repeat [length of [scores]]</li><ul><li>change [playerID] by [1]</li><li>if [[item [playerID] of [scores]] = [score]] then</li><ul><li>change [result] by [1]</li></ul></ul></ul>This new block (or function) is a little different from the ones we made before, because it takes in a parameter - the score we want to look for. <br/><br/>You can drag that <i>score</i> parameter down from the define block to use it in your code. It's like a variable, but it can only be used in this function.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-43": "To try that out, try running the how many players with score [] block with the score parameter set to a number that is in your scores list. The result variable will be set to the number of players with that score.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-44": "Let’s start building the <i>announce winners</i> function that we created earlier. Add these blocks to the <i>define [announce winners]</i> block:<ul><li>Find max score</li><li>How many players with score [maxScore]</li><li>If [[result] = [1] then</li><ul><li>Say [ join [The winner, with a score of ] [maxScore]] for [5] seconds</li><li>Say [join [is Player ] [item # of [maxScore] in [scores]]</li></ul></ul>Now when this runs, the <i>maxScore</i> variable will be set to the highest score by the <i>find max score</i> function. Then, the <i>result</i> variable will be set to the number of players with that score by the <i>how many players with score [maxScore]</i> block. If there’s only one winner, it’s very easy just to say who they are - and we can use the <i>item # of [maxScore] in [scores]</i> block to look up where that score is on the scoreboard. But if there is a tie and there is more than one winner, things are a little more complicated.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-45": "Inside the <i>else</i> part of the <i>if … else</i> block, add these blocks<ul><li>Say [join [join [There are ] [result]] [ winners!]] for [5] seconds</li><li>Say [join [With scores of ] [maxScore]] for [5] seconds</li><li>Set [winners] to [join [Player] [item # of [maxScore] in [scores]]</li><li>Set [playerID] to [item # of [maxScore] in [scores]</li><li>Repeat until [[playerID] = [length of [scores]]</li><li>Change [playerID] by [1]</li><li>If [[item [playerID] of [scores] = [maxScore]] then</li><li>Set [winners] to [join [join [winners] [ and Player]] [playerID]</li><li>Say [winners]</li></ul>Now if there is more than one winner, the sprite will say how many there are, and then list them Variables can store more than just numbers - here the <i>winners</i> variable is used to build up a string of text that lists all the winners</br></br>The <i>repeat until</i> loop iterates through from the first score in the list that matches the <i>maxScore</i> variable through to the end. Every time it finds another score that matches, it adds that player to the <i>winners</i> variable.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-46": "Try it out! <br/> Now at the end of the quiz the winners will be listed, even if there is a tie!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-13.step-47": "Well done! You coded up a game show using cogs as the contestants buzzers!<br/><br/>You used <b>lists</b> to store the questions, answers, and the scoreboards<br/><br/>You used <b>local variables</b> so that each cog could keep track of its player number separately.<br/><br/>We learned about using <b>functions</b> (making our own blocks) to keep our code neat and more easy to read. Easy to read code is easier to debug - and breaking down long complicated sections of code into smaller chunks is called <b>Functional Decomposition</b><br/><br/>Functions are also super useful where you might want to run code more than once and you don’t want to copy and paste it over and over again<br/><br/>You also learned how functions can have parameters. The how many players with score function takes in a score to look for<br/><br/>Next steps<ul><li>Can you add more questions and answers (and maybe more cogs) to your quiz?</li></ul>",

  "gui.howtos.lessons.type-lesson-cog-tutorial-14.name": "Motion Tracker",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.description": "Let’s make a motion tracker!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-1": "Let's build a motion tracker with Cog!<br/><br/>We'll use the accelerometer to collect data on movement, and then use that to classify each minute that passes as an active one or not.<br/><br/>We can then show a dashboard of physical activity, and prompt the user to move around if they haven't been very active.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-2": "Make a list called <i>ax</i><br/><br/>We'll use this to store recent readings from the accelerometer x-axis",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-3": "Add these blocks:<ul><li>When green flag clicked</li><li>Set [numSamples] to [10]</li><li>Delete all of [ax]</li><li>Repeat [numSamples]</li><ul><li>Add [Accelerometer [X]] to [ax]</li></ul><li>Forever</li><ul><li>Set [sampleCounter] to [[[sampleCounter] mod [numSamples]] + [1]]</li><li>Replace item [sampleCounter] of [ax] with [Accelerometer [X]]</li><li>Wait [0.1] seconds</li></ul></ul><br/>You'll need to create the <i>numSamples</i> and <i>sampleCounter</i> variables.<br/><br/>What do you think this code will do?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-4": "Try it out!<br/><br/>Press the green flag to run the code, and then move cog around<br/><br/>You'll see the ax list being updated every 0.1 seconds with the latest reading (or <i>sample</i>) from the accelerometer x-axis.<br/><br/>Each new sample in the ax list replaces the oldest one, and we use the <i>mod</i> operator to ensure that the <i>sampleCounter</i> variable loops around from the end of the list back to the beginning of it.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-5": "We need a way to determine whether the data we’ve collected shows if cog is moving or not.<br/><br/>One simple way of doing that is to look at how much it is changing - movement should mean acceleration, which the accelerometer will measure.<br/><br/>We'll make a new block called <i>get range</i>, which will figure out how much the data in the ax list varies.<br/><br/>Add these blocks:<ul><li>Define [get range]</li><li>Set [rangeCounter] to [0]</li><li>Set [min] to [item [1] of [ax]]</li><li>Set [max] to [item [1] of [ax]]</li><li>Repeat [length of [ax]]</li><ul><li>Change [rangeCounter] by [1]</li><li>Set [sample] to [item [rangeCounter] of [ax]]</li><li>If [[sample] < [min]] then</li><ul><li>Set [min] to [sample]</li></ul><li>If [[sample] > [max]] then</li><ul><li>Set [max] to [sample]</li></ul><li>Set [result] to [[max] - [min]]</li></ul></ul><br/>This function will now iterate through the entire ax list one sample at a time, and pick out the minimum and maximum values.<br/>At the end, it’ll set the result variable to the difference between the two.<br/>More movement will mean that a bigger range of values is recorded.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-6": "Let’s add blocks to interpret that range and classify it as motion or not.<br/><br/>Add these blocks:<ul><li>When green flag clicked</li><li>Set [motionThreshold] to [0.2]</li><li>Forever</li><ul><li>Wait [1] seconds</li><li>Get range</li><li>If [[result] > [motionThreshold]] then</li><ul><li>Set [motionDetected] to true</li></ul><li>Else</li><ul><li>Set [motionDetected] to false</li></ul></ul></ul><br/>Here we’ve defined a threshold - a value which we’re comparing the range of accelerometer samples against. If the range is higher than this threshold we’ll say that we’ve detected motion, and if not then we’ll say that we haven’t.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-7": "Try it out!<br/>Now once every second the program will look at the list of samples from the accelerometer and determine whether it thinks there’s been movement or not.<br/><br/>It takes the 10 individual accelerometer readings (or samples) and works out a single true or false detection for movement.<br/><br/>We could change the variables we’ve set to adjust this behaviour.<br/><br/>For example, we could change the <i>motionThreshold</i> to make the program more or less sensitive to movements.<br/><br/>We could also change the <i>numSamples</i> to vary how long a snapshot of movement we’re looking at each time. With 10 samples taken at 0.1 second intervals we’re looking to see if there’s been movement over the last 1 second, but if you increased <i>numSamples</i> it would check for movement over a longer window.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-8": "Ok, so we’ve built a program that will try and determine, second by second, whether cog has been moved at all.<br/><br/>Let’s do more with that data!<br/><br/>It would be good to determine whether we think a minute has been active or not in general.<br/><br/>To do that, let’s count the number of active seconds in every minute.<br/><br/>Add a new variable called <i>activeSecondsThreshold</i> and a <i>set [activeSecondsThreshold] to [30]</i> block just after the <i>set [motionThreshold]</i> block and before the forever loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-9": "Add another variable called activeSeconds<br/>Just inside that <i>forever</i> loop, add a <i>set [activeSeconds] to [0]</i> block, and then a <i>repeat [60]</i> block that surrounds the rest of the code in the forever loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-10": "Inside the <i>if [[result] > [motionThreshold] then</i> conditional, add a <i>change [activeSeconds] by [1]</i> block<br/>With this code, we’ll be counting how many seconds out of every 60 we think are active.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-11": "Make a new list called activeMinutes<br/>Just after the <i>repeat [60]</i> loop (but still inside the forever loop), add these blocks:<ul><li>If [[activeSeconds] > [activeSecondsThreshold]] then</li><ul><li>Add [true] to [activeMinutes]</li></ul><li>Else</li><ul><li>Add [false] to [activeMinutes]</li></ul></ul><br/>Now, after every 60 seconds - so once a minute - we’ll compare the total number of active seconds in that minute to the <i>activeSecondThreshold</i> variable, to classify whether we think that minute as a whole has been active or not.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-12": "Let’s not forget to clear the <i>activeMinutes</i> list at the start of the program!<br/>Add a <i>delete all of [activeMinutes]</i> block after the <i>set [activeSecondsThreshold]</i> block<br/>You should always remember to reset all your variables and lists at the start of a program - this is called initialising your variables, and if you forget to do it that’s another place where bugs can come in!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-13": "Try it out!<br/><br/>Every time motion is detected for more than 30 seconds during each 60 second window, that minute will be recorded as true in the <i>activeMinutes</i> list.<br/><br/>Otherwise, a <i>false</i> will be recorded.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-14": "Let’s get some other useful information to show to the user<br/>Make two new variables called <i>totalActiveSeconds</i> and <i>totalSeconds</i><br/>Initialise them both by setting them to 0 at the start of the program",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-15": "Can you think where you should add blocks to increase these new variables?<br/><br/>One potential place is as shown here, where <i>totalActiveSeconds</i> is increased every time <i>activeSeconds</i> is increased, and <i>totalSeconds</i> is increased every iteration of the <i>repeat [60]</i> loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-16": "Try it out!<br/>Now the program will also record the proportion of active seconds.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-17": "Let’s report some of this information in a more user-friendly way.<br/><br/>Add a <i>broadcast [report stats]</i> block just before the end of the <i>forever</i> loop.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-18": "Add a new sprite — you can pick any one you like. In this example we’ve picked a robot.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-19": "Add these blocks:<ul><li>When I receive [report stats]</li><li>Say [join [join [join [join [You have been active for ] [totalActiveSeconds]] [ out of ]] [totalSeconds]] [ seconds]] for [5] seconds</li><li>Say [join [join [That is [round [[[totalActiveSeconds] / [totalSeconds]] * 100]]] [% of the time]] for [5] seconds</li></ul><br/>Now, once a minute the sprite will tell the user how active they’ve been and what that is as a percentage of the time that’s passed.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-20": "Try it out!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-21": "Add these blocks:<ul><li>Set [minuteCounter] to [0]</li><li>Set [totalActiveMinutes] to [0]</li><li>Repeat [length of [activeMinutes]]</li><ul><li>Change [minuteCounter] by [1]</li><li>If [[item [minuteCounter] of [activeMinutes]] = [true]] then</li><ul><li>Change [totalActiveMinutes] by [1]</li></ul></ul><li>Say [join [join [join [join [And] [totalActiveMinutes]] [ out of ]] [length of [activeMinutes]]] [ minutes]] for [5] seconds</li><li>Say [join [join [That’s] [[round [[[totalActiveMinutes] / [length of [activeMinutes]] * 100]]] [% of the minutes]] for [5] seconds</li></ul><br/>Now the sprite will also say how many of the minutes we’ve classified as active.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-22": "Try it out!<br/><br/>You will probably find that the two percentages reported differ from each other — that’s down to the two different ways that we grouped and classified the data.<br/><br/>Every time someone programs a system to convert lots of individual readings into simpler statistics, they have to make decisions about how to do it — it’s our job as programmers to try and make sure the summary is as accurate as possible and not misleading.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-23": "The percentage of active seconds definitely feels like a more accurate summary of how active our user has been overall, but that doesn’t mean that the list of active minutes isn’t useful. It’s a more pessimistic estimate of activity, but it does show if someone isn’t moving around much.<br/><br/>Let’s add something to prompt the user to get some exercise if they haven’t moved much in the last 5 minutes.<br/><br/>Add these blocks:<ul><li>If [[length of [activeMinutes]] > [4]] then</li><ul><li>Set [totalActiveMinutes] to [0]</li><li>Repeat [5]</li><ul><li>If [[item [minuteCounter] of [activeMinutes]] = [true]] then</li><ul><li>Change [totalActiveMinutes] by [1]</li></ul><li>Change [minuteCounter] by [-1]</li></ul><li>If [[totalActiveMinutes] = [0]] then</li><ul><li>Broadcast [signal user]</li><li>Say [You haven’t moved much in the last 5 minutes]</li></ul></ul></ul><br/>After reading out the main stats, the code will check whether there are at least 5 minutes recorded in the <i>activeMinutes</i> list.<br/>If there are, it will step backwards through the 5 most recent minutes in the list, and count how many of them were active minutes.<br/>If none of them were, then the <i>signal user</i> message will be sent, and the sprite will let the user know that they haven’t been moving much.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-24": "Change back to Cog.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-25": "Add these blocks:<ul><li>When I receive [signal user]</li><li>Repeat [3]</li><ul><li>Set [ring] LEDs to [red]</li><li>Play note [A5] for [0.5] seconds</li><li>Set [ring] LEDs to [white]</li><li>Wait [0.5] seconds</li></ul><li>Turn off all LEDs</li></ul><br/>Now Cog will also beep and light up to let the user know that they should move around more.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-26": "Try it out!<br/>Put cog in your pocket and leave your code running while you do some other work or play — see what it reports.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-14.step-27": "Well done!<br/>You’ve turned cog into a fitness tracker!<br/>It will measure how active you are, and remind you to move around if you’re stationary for too long.<br/><br/>In real life, sitting still for 5 minutes is definitely ok, but it is important to stay active and move regularly.<br/><br/>How much of the day do you think you should be active for? And how frequently?<br/><br/>You learned about how to collect and analyse data, and classify it from a large set of samples into a simple true or false measurement of activity. For every minute, 600 measurements were taken from the accelerometer, and we reduced all that down into a single note on whether that minute was active or not.<br/><br/>Think about the other software and systems that make decisions and classifications. What kinds of decisions did the programmers have to make when designing them, and what could potentially go wrong?<br/><br/><b>Next steps<ul><li>Think about whether you would change any of the various thresholds and other variables that control the behaviour of our fitness tracker.</li><li>Think about what other summary stats you’d like your fitness tracker to report, and how you might calculate them.</li></ul>",

  "gui.howtos.lessons.type-lesson-cog-tutorial-15.name": "ML Gesture Sensing",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.description": "Let's make a gesture sensing model!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-1": "Let's use machine learning to recognize specific movements with Cog!<br/><br/>We'll train a model to recognize gestures, and use these as part of a memory game based on learning spells!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-2": "Click on the <i>Machine Learning</i> tab",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-3": "Select the <i>+</i> icon and click the <i>New Accelerometer Model</i> option",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-4": "Press <i>Continue</i>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-5": "The data we’ll use to train this model will be the three axes of the accelerometer. <br/><br/> You can see this data in real time on this screen, just like in the sensor dashboard",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-6": "Type in a Model Name of <i>gesture</i> and then put in the word <i>nothing</i> in the Create New Class box<br/>Press the + button to create this new class",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-7": "That will create a class called <i>nothing</i>. <br/>We will have one class for each type of movement we want to detect - and that also means having a base case of no movement.<br/><br/>We now need to collect training data for the <i>nothing</i> class. You can collect samples of data for accelerometer models like this by holding down the button on Cog.<br/><br/>Pick up Cog, hold it steady and then push the button for a couple of seconds.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-8": "Rotate cog into a different position, hold it steady and then push the button again for a couple of seconds to collect a new sample<br/>Repeat this with different positions until you have 10-20 samples",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-9": "Now create another class called <i>swoosh</i>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-10": "This time you want to record samples of making a side-to-side slow swooshing motion.<br/>Move cog gently back and forth and hold the button down for each individual movement - letting go once that movement is finished.<br/>The movement you record here will hopefully be recognised later and classified as a swoosh.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-11": "Again, make sure you have at least 10 samples",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-12": "Now make another class called <i>flick</i>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-13": "This will be a short, sharp flick movement.<br/>Again, record samples by pressing the button down just long enough to capture one movement.<br/>Try to get examples of different finishing positions to make sure it’s representative of the motions you’d like to detect later",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-14": "Make sure you have at least 10 samples again.<br/>You’ll probably see that for the <i>nothing</i> class, the lines on the individual samples are quite flat. In the <i>swoosh</i> there’s one that makes a big curve down and up.<br/>And the lines for the <i>flick</i> are much more jagged - if you saw these samples you’d probably be able to classify them into one of our three labels - <i>nothing</i>, <i>swoosh</i> and <i>flick</i>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-15": "Ok, let’s see if we can get the computer to do that!<br/>Click the <i>Train</i> button. This will look at all the labelled training data, and try to build a model that can classify new data as it comes in",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-16": "You’ll see a notice about a Loading Loss Plot, and then a graph will appear.<br/>The loss plot shows how well the model is doing from step to step as it repeatedly tries to classify the training data. Each iteration of training is called an <i>epoch</i> - that’s what’s on the x-axis of the loss plot.<br/>A steep downwards gradient in the loss plot means that the model is changing a lot each epoch, and getting better at classifying the data.<br/>Training will finish when the level of loss isn’t changing much any more.<br/>A low loss means that it has been able to accurately classify most of the training data that we gave it - so we want the final amount of loss to be low",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-17": "Now press the <i>Run</i> button to try running the model on new data.<br/>Then move Cog around - try doing the two movements you trained it on, and see if it can recognise them.<br/>The three percentage bars represent the model’s confidence level in its classification",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-18": "You might find that sometimes movements get misclassified - or for example that it’s easy to have a <i>swoosh</i> incorrectly detected just before a <i>flick</i>.<br/>To fix that we can try adding more training data.<br/>Click on the class you want to add samples to, and then record more.<br/>If there are any that you think you messed up, you can click on the individual samples to delete them",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-19": "Once you’re happy, press <i>Train</i> to train the model again.<br/>Then <i>Run</i> it and see if you’re happy with the performance.<br/>I still had problems with the model detecting a <i>swoosh</i> before every <i>flick</i>, when there wasn’t one. To try and fix that I added some samples to the <i>nothing</i> class of me rotating Cog from horizontal to vertical - the kind of motion I do before a flick, that was being miscategorised as a swoosh",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-20": "Your model will be well trained when each detection is distinct and clear - like here where it goes straight from <i>nothing → swoosh</i> and back, and the same for <i>nothing → flick</i> and back.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-21": "Once you’re definitely happy, click the <i>Save</i> button.<br/><b>You will not be able to make any changes or add any more samples to this model after you click save.</b><br/>That’s because the original training data is no longer needed and so is discarded",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-22": "Ok, with your model saved, you’re ready to use it in a program!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-23": "Go back to the <i>Code</i> tab",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-24": "Go to the <i>ML</i> category",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-25": "Check the box next to the <i>accelerometer label</i> block.<br/>Once we start classification that will show us what the model is detecting",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-26": "Add these blocks:<ul><li>When green flag clicked</li><li>Load Machine Learning model [gesture]</li><li>Label once every [1] seconds</li><li>Set confidence threshold [0.5]</li></ul><br/>This will start the <i>gesture</i> model that we trained up. It will update its classification of what movement it thinks is happening every 1 second.<br/><br/>Remember before how when we tested the model we saw percentage bars about how confident it was in detections? The <i>confidence threshold</i> sets a threshold for how certain the model needs to be before it will give a classification.<br/>We’ll leave it at 0.5 (or 50%) for now, but we might need to increase it later if the model is giving spurious classifications",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-27": "Try it out!<br/>Press the green flag and the model will start running and classifying movement.<br/>Try out your <i>swoosh</i> and <i>flick</i> movements, and you should see that they are detected!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-28": "Add these blocks:<ul><li>When received accelerometer label [swoosh]</li><li>Set [ring] LEDs to [green]</li><li>Broadcast [swoosh] and wait</li><li>Wait [1] seconds</li><li>Turn off all LEDs</li></ul><p>And</p><ul><li>When received accelerometer label [flick]</li><li>Set [ring] LEDs to [red]</li><li>Broadcast [flick] and wait</li><li>Wait [1] seconds</li><li>Turn off all LEDs</li></ul><br/>Now Cog will react by showing lights, and we’ll broadcast a message, whenever a swoosh or a flick is detected",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-29": "Try it out!<br/>Now when you do the movements Cog will light up",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-30": "Ok, let’s make a memory game using the motion detector!<br/>Add a <i>Witch</i> sprite and move it to the bottom left corner",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-31": "Now select the <i>Stage</i>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-32": "And go to the <i>Costumes</i> tab",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-33": "Add some text saying “Learn to Spell”.<br/>This will be the title screen for the game.<br/>You can also add other decoration if you like - like here where we’ve added a purple trapezoid and a white outline around the text",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-34": "We’ll add a few more backdrops to use in the game.<br/>Press the <i>Choose a Backdrop</i> button",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-35": "Select the <i>Castle 3</i> backdrop",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-36": "Also add <i>Castle 2</i> and <i>Witch House</i>, so that you have four backdrops total.<br/>Rename the first one to <i>title screen</i>, so that we can identify it easily",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-37": "Go back to the code tab, with the stage still selected.<br/><br/>Add these blocks:<ul><li>When green flag clicked</li><li>Switch backdrop to [title screen]</li><li>Wait [2] seconds</li><li>Switch backdrop to [Castle 3]</li></ul><br/>Now when the game is started the player will be shown the title screen for 2 seconds, before it switches to Castle 3 - the inside of the castle",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-38": "We’re going to add a brief tutorial to the game, and get the player to confirm that they can do the swoosh and flick movements.<br/>We’ll make these movements be required to progress through the backdrops.<br/><br/>Add these blocks:<ul><li>When I receive [swoosh]</li><li>If [[backdrop [name]] = [Castle 3]] then<ul><li>Repeat [50]<ul><li>Change [fisheye] effect by [10]</li><li>Change [whirl] effect by [-10]</li></ul></li><li>Switch backdrop to [Castle 2]</li><li>Repeat [50]<ul><li>Change [fisheye] effect by [-10]</li><li>Change [whirl] effect by [10]</li></ul></li></ul></li></ul><br/>So now when the player makes a swoosh movement while the witch is inside the castle, it will do a fancy transition to the Castle 2 backdrop",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-39": "We need one for the flick movement as well.<br/><br/>Add these blocks:<ul><li>When I receive [flick]</li><li>If [[backdrop [name]] = [Castle 2]] then<ul><li>Repeat [50]<ul><li>Change [fisheye] effect by [10]</li><li>Change [whirl] effect by [-10]</li></ul></li><li>Switch backdrop to [Witch House]</li><li>Repeat [50]<ul><li>Change [fisheye] effect by [-10]</li><li>Change [whirl] effect by [10]</li></ul></li><li>Broadcast [start game]</li></ul></li></ul><br/>You might find it quicker to right click and duplicate this code, just be careful to change it in the right places and add the broadcast block!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-40": "Now select the <i>Witch</i> sprite",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-41": "We need to add some instructions to the tutorial steps.<br/><br/>Add these blocks:<ul><li>When backdrop switches to [Castle 3]</li><li>Wait [2] seconds</li><li>Say [It’s time to leave the castle] for [2] seconds</li><li>Say [Swoosh the wand to transport us outside]</li></ul><p>And</p><ul><li>When backdrop switches to [Castle 2]</li><li>Wait [2] seconds</li><li>Say [Let’s go to my house for spell practice] for [2] seconds</li><li>Say [Flick the wand to transport us there]</li></ul>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-42": "Ok, let’s try it out!<br/>To run the ML model, you’ll need to select Cog again and start the program with Cog selected",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-43": "With Cog selected, press the green flag to run the code!<br/>You’ll need to do a <i>swoosh</i> and a <i>flick</i> to help the witch magically travel from the castle to the forest, and then from the forest to her house",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-44": "With the witch in her house, let’s start the game properly.<br/>This is going to be a memory game, where the witch will read out a sequence of gestures and the player will have to remember them and do them in order.<br/>Select the <i>Witch</i> sprite again",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-45": "Add these blocks:<ul><li>When I receive [start game]</li><li>Delete all of [gestures]</li><li>Add [swoosh] to [gestures]</li><li>Add [flick] to [gestures]</li><li>Set [lives] to [3]</li><li>Set [sequenceLength] to [2]</li></ul><br/>You’ll need to make a list called <i>gestures</i>, and variables called <i>lives</i> and <i>sequenceLength</i>.<br/>The gestures list will list all the possible movements we can do - if you wanted to expand the game with more motions you could add them here once you’ve trained a model on them as well.<br/>We’ll give our player 3 lives to begin with, and they’ll lose one every time they get something wrong.<br/>And we’ll start off with a sequence of 2 movements",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-46": "Make a new block called <i>make a sequence of [length] gestures</i>.<br/>You’ll need to use both the <i>Add an input number or text</i> and <i>Add a label</i> options",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-47": "Add these blocks:<ul><li>Define [make a sequence of [length] gestures]<ul><li>Delete all of [sequence]</li><li>Repeat [length]<ul><li>Add [item [pick random [1] to [length of [gestures]]] of [gestures]] to [sequence]</li></ul></li></ul></li></ul><br/>You’ll need to make another list called <i>sequence</i>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-48": "Now add the block <i>make a sequence of [sequenceLength] gestures</i>.<br/>The make a sequence function will take in the value of the <i>sequenceLength</i> variable as an argument for its <i>length</i> parameter",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-49": "Add these blocks:<ul><li>When I receive [flick]</li><li>Add [flick] to [user input]</li></ul><p>And</p><ul><li>When I receive [swoosh]</li><li>Add [swoosh] to [user input]</li></ul><br/>You’ll need to make another list called <i>user input</i>.<br/>This is where we’ll keep track of the motions the player has made, so we can compare them against the ones they were supposed to make",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-50": "Add these blocks after the <i>make a sequence of [sequenceLength] gestures</i> block:<ul><li>Say [I’m going to read out some gestures] for [2] seconds</li><li>Say [You have to do them in the same order] for [2] seconds</li><li>Say [Ready?!] for [2] seconds</li><li>Repeat [10]<ul><li>Say [sequence] for [2] seconds</li></ul></li><li>Delete all of [user input]</li><li>Wait until [[length of [user input]] = [length of [sequence]]]</li><li>If [[user input] = [sequence]] then<ul><li>Say [Well Done!] for [2] seconds</li><li>Say [Let’s make it more complicated] for [2] seconds</li><li>Change [sequenceLength] by [1]</li><li>Make a sequence of [sequenceLength] gestures</li></ul></li><li>Else<ul><li>If [[lives] > [0]] then<ul><li>Say [Oops! Not quite] for [2] seconds</li><li>Say [Try again…] for [2] seconds</li><li>Change [lives] by [-1]</li></ul></li><li>Else<ul><li>Finish game</li></ul></li></ul></li></ul><br/>You’ll need to make a new block called <i>finish game</i>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-51": "Add these blocks to define the finish game function:<ul><li>Define [finish game]<ul><li>Say [That’s enough for now. Well done!] for [2] seconds</li><li>Say [join [join [You learned a spell with] [[sequenceLength] - [1]]] [gestures]] for [10] seconds</li><li>Stop [all]</li></ul></li></ul><br/>Now when the player runs out of lives they’ll be told their score - how long a sequence of movements they were able to memorise and perform",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-52": "Select Cog again and try it out!<br/>You can still make the game fullscreen before starting it, to make it easier to see what the Witch is saying",
  "gui.howtos.lessons.type-lesson-cog-tutorial-15.step-53": "Well done!<br/>You’ve learned about Machine Learning, and <b>trained</b> a model to <b>classify</b> gestures from movement data.<br/>You were able to collect lots of <b>samples</b> for training the model, and test it before saving it and using it in your code.<br/>Then you used functions and lists to make a memory game!<br/><br/><b>Next steps</b><br/>• Could you add a third gesture into the game?<br/>• Experiment with adjusting the Machine Learning parameters - the confidence threshold and labelling frequency.<br/>• Make a better ending to the game if the player is able to remember really really long sequences of moves",

  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.description": "Learn how programmers use variables and loops to supercharge their code!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-1": "In this tutorial, we're going to learn how programmers use <b/>variables</b> to supercharge their code!<br /><br />Variables are really important in programming. They help computers <b/>remember and manipulate</b> data so we can do more complicated tasks in less lines of code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-2": "Imagine a variable as a labelled storage box. A variable has three parts: a name, a type and a value.<br /><br /> The <b/>name</b> tells us <i/>\"what do we call this box?\"</i> <br /> The <b/>type</b> tells us <i/>\"what kind of thing do we keep in this box?\"</i><br /> The <b/>value</b> tells us <i/>\"what exactly are we currently keeping in the box?\"</i> <br /><br /> In this exercise, we’re going to make and use a variable called <b/>my counter</b> to help Marty count to ten!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-3": "First let’s make our variable <b/>my counter</b>.<br /><br />Select \"Make a Variable\" and call it <b/>my counter</b>. Click \"ok\" and watch how the variable pops us in the top left corner, with a current value of 0",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-4": "To code with our <b/>my counter</b> variable, we can drag it from the Variables category into the scripting area.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-5": "Let’s make Marty read out our variable!<br /><br />Select the “Marty speak” block, and replace “hello” with the <b/>my counter</b> variable like below. Click on this block and you should hear your Marty say “zero”.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-6": "If we want Marty to count up from 0 to 10, we need to +1 to <b/>my counter</b> before each time we tell Marty to say a number.<br /><br />In variables, we can select the <b/>change my counter by 1</b> block, which will +1 to <b/>my counter</b>.<br /><br />Place this before \"Marty speak\" like below. Click these blocks and hear Marty say \"one\"!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-7": "Click the code block again, and Marty says “two”. <br/><br/>Click the code block until Marty counts from 1 to 10!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-8": "Hmm... What if we want to count to ten again? We need to reset <b/>my counter</b> to zero!  <br /><br />Select “set my counter to 0” to the scripting area, click it and <b/>my counter</b> should be reset to 0.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-9": "Let's try an extra challenge - what if we wanted to make Marty count from 0 to 10 just by clicking the green flag button?<br /><br /> We'd need Marty to repeat our code lots of times until he reaches ten.\n<br /><br /> We can control this using a <b/>repeat until</b> block - place our existing code inside it like this:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-10": "We want to repeat this process until <b/>my counter</b> becomes more than 10.<br /><br /> Select the more than block. Place it into the diamond of <b/>repeat until</b>, and change 50 to 10.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-11": "Let's complete our <b/>repeat until</b> statement.<br /><br /> We want to continue the loop until my counter is greater than ten.<br /><br /> Navigate to variables, and fill in the repeat statement with <b/>my counter</b> just like this:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-12": "Think back to step 8, we want to set <b/>my counter</b> to zero each time we want to start counting. <br /><br /> Drag the <b/>set my counter to 0</b> block and place it before our repeat block like this.<br /><br /> Now Marty will always start from 0.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-13": "Great work! You're almost there!<br/><br/>Finally, add a <b/>when green flag clicked</b> block at the top of our code to finish it off.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-3.step-14": "You did it!You now know how to use variables, manipulate them, and make an <b/> iterative loop </b> to help Marty count to ten!",

  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.description": "Learn how computers control code that happens at the same time!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-1": "In this tutorial, we're going to learn how programmers use <b/>parallel programs, race conditions and mutual exclusion</b> to control the order that pieces of code runs in!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-2": "Parallel programs are seperate pieces of code that we ask a computer to run at the same time.<br/><br/>Just like humans, there are some things that computers, and Martys, can't do at the same time.<br/><br/>For example, <b/>humans can't walk forwards and backwards at the same time - and neither can Marty!</b><br/><br/>Trying to do this creates what we call a <b/>race condition</b>, where our program can't actually run all our parallel code at once.<br/><br/>This can cause unpredictable behaviour - bad news for programmers!<br/><br/><br/><i/>Click the image to expand the diagram.</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-3": "So, how do programmers take back control when race conditions pop up? <br/><br/> They use <b/>mutual exclusion</b> to say things like, <i/>don't walk backwards until I walk forwards first.</i> <br/><br/> Mutual exclusion can be implemented using lots of different methods, such as if-statements, wait blocks, variable control and lots more!<br/><br/><br/><i/>Click the image to expand the diagram.</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-4": "To demonstrate a race condition, we're going to ask Marty to walk forwards and backwards at the same time.<br/><br/>First, we'll write our \"walk forwards\" code.<br/><br/> Select a <b/>when green flag clicked</b> block and drag it into the scripting area.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-5": "Place a <b/>walk 2 steps forward</b> block after the green flag block.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-6": "Select a second <b/>when green flag clicked</b> block and drag it into the scripting area to create our parallel \"walk backwards\" code.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-7": "Finally, add a <b/>walk backwards</b> block to complete our parallel code.<br/><br/>Now, can Marty walk forwards and backwards at the same time? <b/>No!</b> We've created a race condition.<br/><br/><i/>Click the green flag and see what Marty will do first...</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-8": "Did you notice that Marty walked <b/>forward first, and then backwards?</b> Let's investigate why.<br/><br/>First, delete all of your code so we have a blank slate.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-9": "Now we're going to recreate our parallel code, but make our <b/>walk backwards</b> code first.<br/><br/> Recreate the code shown in the image below.<br/><br/><i/>If you need some help just skip back to steps 6 and 7!</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-10": "Now let's recreate our <b/>walk forwards</b> code as well. Your parallel code should look like this: <br/><br/><i/>If you need some help, just skip back to steps 4 and 5!</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-11": "Click the green flag and watch what Marty does now... <b/>he walks backwards first!</b><br/><br/> This is because Marty's software handles race conditions by accessing and running the <b/>oldest</b> code first.<br/><br/>The problem is, we can't just tell by looking what code was created first, and as we write more complicated code, things can get confusing!<br/><br/>Let's explore how we can use <b/>wait functions and variables</b> to control our parallel code!<br/><br/><br/><i/>Click the image to expand the diagram.</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-12": "Like we learned before, programmers get around race conditions by using mutual exclusion.   <br/><br/>This means that we can press \"go\" on both pieces of code at the same time, but we can control what action <b/>actually</b> happens first.   <br/><br/>First, we'll use a wait block to mutually exclude our code.   <br/><br/><br/><i/>Click the image to expand the diagram.</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-13": "Let's tell Marty to walk forwards, then backwards.   <br/><br/>It takes Marty around 3 seconds to walk forwards, so we'll place a wait block before \"walk backwards\" and change the parameter to 3 seconds, matching the sample code below.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-14": "Click the green flag and watch how Marty walks forward first, exactly like we wanted him to!   <br/><br/>So, we know that using wait blocks can help us with mutual exclusion, but for longer, more complicated code they aren't so great.   <br/><br/>The length of time code takes to run can be varied and complex, making it difficult to accurately predict a wait time.   <br/><br/>Let's look at using <b/>variable control</b> for a more accurate method of mutual exclusion.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-15": "We're going to use a variable called \"next move\" to mutually exclude our \"walk backwards\" and \"walk forwards\" code.  <br/><br/>Even though both blocks of code will run when we click the green flag, we can say:  <br/><br/>Don't <i/>actually</i> take a step forward<b/> until next move = forward.</b>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-16": "Create a variable called next move. We'll use this to control which move Marty makes next.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-17": "Remove the wait block we previously added so your code matches the example below. <br/><br/>Now you're ready to implement variable control!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-18": "Instead of waiting an amount of seconds before walking, we want Marty to <b/>wait until</b> next move is set to the right value: forwards or backwards.   <br/><br/>Add a wait until block before each walk block, like shown here:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-19": "We want Marty to <b/>wait until</b> next move=forwards or next move=backwards to do the relevant move.   <br/><br/>Select two <b/>equals operators</b>, and fill them out like shown below.   <br/><br/>You can get two next move blocks from the orange Variables tab.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-20": "Now use the green equals blocks to fill in the empty <b/>wait until</b> blocks, so they match the sample code below:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-21": "If we want Marty to walk forwards first, he should walk backwards next, and vice versa.<br/><br/>So, we want use the set <b/>next move</b> block to change next move after we walk.<br/><br/>Place two of these blocks at the end of each piece of code, and type \"forwards\" or \"backwards\" in each one, to match the sample code below:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-22": "Finally, select a <b/>set next move to</b> block to set whether we want Marty to go forwards or backwards first.<br/><br/> Let's say we want Marty to walk backwards first - type \"backwards\" into the parameter space, and click the block so that next move is set to backwards.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-4.step-23": "You did it! You can now use <b/>variable control</b> and wait functions to mutually exclude parallel code!<br/> Click the green flag and watch your parallel code work together.<br/><br/>Both code blocks run at the same time, but your \"next move\" variable makes sure we always know what's coming next!<br/><br/><i/>For an extra challenge, why not try changing next move to \"forwards\" (or even something random like \"banana\") and see how Marty walks now...",

  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.description": "Let's use parallel programming with variable control to help Marty show off all his funny faces!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-1": "Now that we’re experts at variable control of parallel programs, lets put our learning into practice by helping Marty show off all his funny faces!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-2": "Select two green flag blocks.<br/><br/>When the green flag is clicked, both of these blocks will activate and run all the code underneath them at the same time, in parallel.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-3": "Now let's add some of Marty’s expressive sounds, one after the other, underneath a green flag block.<br/><br/> We want to write code that says:   <br/><i/> When green flag clicked   <br/> Play sound: Disbelief until done   <br/> Play sound: No! until done   <br/> Play sound: Excited until done</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-4": "Let's place our first sound block underneath one of the green flag blocks.<br/><br/>Use the dropdown box to select \"Disbelief\", to go along with Marty's surprised face!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-5": "Now let's place the second sound block.     <br/><br/>Use the dropdown box to select \"No!\", to go along with Marty's grumpy face!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-6": "Now let's place the final sound block.     <br/><br/>Use the dropdown box to select \"Excited\", to go along with Marty's excited face!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-7": "Now let’s write some code to control Marty's expressions under the second green flag block. We want our code to say:   <br/><br/><i/>When green flag clicked   <br/>Eyes wide   <br/>Eyes angry   <br/>Eyes excited</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-8": "Let's place our first <b/>eyes</b> block underneath the second green flag block like shown.     <br/><br/>Use the dropdown box to select \"Wide\", to show off Marty's surprised face!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-9": "Now let's place the second eyes block.     <br/><br/>Use the dropdown box to select \"angry\", to show off Marty's angry face!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-10": "Now let's place the final eyes block.     <br/><br/>Use the dropdown box to select \"Excited\", to show off Marty's excited face!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-11": "Let's test our code.     <br/><br/>Press the green flag block and see if Marty's expressions match up with the right sound...     <br/><br/>Do they match up? <b/>no!</b>     <br/><br/>This is because the sounds and expressions take <b/>different amounts of time.</b>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-12": "In the last tutorial, we used variables for <b/>mutual exclusion</b>, to make sure two things <b/>didn't</b> happen at the same time.     <br/><br/>In this tutorial, we're going to use variables to <b/>sync</b> our parallel code, making sure the right things <b/> do happen at the same time</b>.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-13": "Navigate to the Variables tab, and make a variable called <b/>Marty feels</b>     <br/><br/>We'll use this to make sure Marty makes the right expression and sound at the same time.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-14": "In Variables, select a <b/>set Marty feels to 0</b> block and place it before the first sound block like shown.    <br/><br/>Fill in 0 with \"suprised\".",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-15": "Select another <b/>set Marty feels to 0</b> block and place it before the second sound block like shown.    <br/><br/>Fill in 0 with \"angry\".",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-16": "Select a final <b/>set Marty feels to 0</b> block and place it before the last sound block like shown.    <br/><br/>Fill in 0 with \"excited\".",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-17": "To make our variables sync up Marty's expressions and sounds, we'll place a <b/>wait until</b> block before each expression    <br/><br/>Place three <b/>wait until</b> blocks like shown below:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-18": "We want Marty to <b/>wait until</b> Marty feels = surprised to make his eyes wide, for example    <br/><br/>Select three equals operators, and fill them out like shown below.     <br/>You can get thee <b/>Marty feels</b> blocks from the orange Variables tab.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-19": "Finally, we'll in the wait blocks with the relevant equals blocks like shown below:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-5.step-20": "You did it - awesome!<br/>Now click the green flag and watch your code work in parallel!<br/><br/>Each expression and sound match up as we use <b/>variable control for syncing</b> Marty’s funny faces!.   <br/><i/>Marty is surprised!    <br/>Marty is angry!    <br/>Marty is excited! </i>     <br/><br/>Extra challenge - how many funny faces can you make Marty pull using variable control?",

  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.description": "Let's recreate unplugged mode using everything we've learned so far! If-statements, loops, parallel code, operator blocks and more...",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-1": "In this tutorial, we’re going to recreate unplugged mode using everything we’ve learned so far!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-2": "Before you start this tutorial, have a play with unplugged mode to remember how it works. <br/><br/>Disconnect your Marty from the app and click “mode” on the back of your Marty to switch to unplugged mode.<br/><br/>Collect one of each colour tile to test out your Marty’s colour sensor, see how unplugged works, then reconnect your Marty and come back to this tutorial!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-3": "Let’s get started!<br/><br/>We’re going to make 5 parallel programs to control each colour in unplugged mode:<br/><b/>green</b> means walk <b/>forwards</b>, <br/><b/>yellow</b> means walk <b/>backwards</b>, <br/><b/>purple</b> means slide <b/>right</b>, <br/><b/>blue</b> means slide <b/>left</b>, <br/><b/>red</b> means <b/>stop & celebrate!</b>,",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-4": "First, place 5 green flag blocks in the scripting area, one for each colour tile in unplugged.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-5": "We don’t want Marty to check his colour sensor just once, we want him to keep checking over and over to do the right action. <br/><br/>So, let’s place a forever loop below each green flag block.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-6": "For each block of code, we want to say:<br/><br/><i/><b/>If</b> Marty senses the colour green/blue/red/purple/yellow, <b/>then</b> do the relevant action.</i><br/><br/>So let's place an if-statement in every forever loop.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-7": "In each block of code, we want to check if, for example <b/>colour sensor = green</b> before we tell Marty to walk forward. <br/><br/> To do this, we'll place an equals operator in every if-statement, and fill them out with one unplugged colour each. <br/><br/>Your code should look like this:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-8": "To complete each if-statement, place a colour sense block in each equals operator like shown. <br/><br/>Make sure you use the dropdown menu to select <i/>LeftColorSensor</i>.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-9": "Great! Now, we want Marty to <b/>repeat</b> the right action <b/>until</b> he’s on a different card. <br/><br/>To do this, we’ll use a <b/>repeat until</b> block.<br/><br/>Place one inside each if-statement like shown here:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-10": "To fill in the repeat block, we want to say: <br/><br/><i/>repeat until <b/>Not</b> colour sensor = green</i>, for example. <br/><br/>Add a not operator in each code block like shown below:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-11": "To fill in each not operator, we want to essentially copy what's in the if-statement, like shown below. <br/><br/>We end up with code that says <i/>repeat until <b/>Not</b> colour sensor = green</i> and so on. <br/><br/>You can do this quickly by left clicking on the green equals block in the if-statement, clicking duplicate, and dragging it down into the <b/>not</b> operator. <br/><br/><br/><i/>Alternatively, go back to steps 7 and 8 to give you a hint on how to fill them in correctly!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-12": "Great job! Now let's place the right action in each block of code. <br/><br/>Inside the code block that detects green, place <b/>walk forwards two steps</b> inside the repeat until block, like shown here:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-13": "Inside the code block that detects purple, place <b/>slide 1 time to the right</b> inside the repeat until block, like shown here. <br/><br/><br/><i/>Remember to use the dropdown box to change left to right!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-14": "Inside the code block that detects blue, place <b/>slide 1 time to the left</b> inside the repeat until block, like shown here.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-15": "Inside the code block that detects yellow, place <b/>walk backwards two steps</b> inside the repeat until block, like shown here:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-16": "Almost done!<br/><br/>Inside the code block that detects red, place a <b/>pause movement</b> and a <b/>dance</b> block inside the repeat until block, like shown here:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-17": "But wait - Marty can't dance without music!<br/><br/>In between the pause and dance blocks, place <b/>start sound</b> and use the dropdown box to select </b>celebrate</b>!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-18": "Finally, we want Marty to stop all code once he's finished celebrating.<br/><br/>Place a <b/>stop all</b> block after the dance block.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-19": "There's two more things we need to do if we want to properly recreate unplugged mode. <br/><br/>When Marty senses a new colour, he changes his eye LEDs to that colour and makes a \"beep beep!\" noise. <br/><br/>Let's put this into our code!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-20": "Place a <b/>set Select LED eyes to</b> block <b/>inside the if-statement, but above the repeat until block</b> in each piece of code. <br/><br/>Change the LED colour to the relevant colour for that block, and make sure to use the dropdown box to select <b/>both eyes</b>. <br/><br/>Your code should look like this:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-21": "We can find Marty's \"beep beep!\" noise in the Sound library, called <b/>Arcade Beep</b>.<br/><br/>Copy the clip below to locate the <b/>Arcade Beep</b> function in Sounds.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-22": "Place a <b/>Start sound: Arcade Beep</b> block after each LED eye block and before each repeat block. <br/><br/>Your code should look like this:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-6.step-23": "You did it! Amazing!<br/><br/>You've used parallel programs, variables, operators, sensors, loops and more to recreate unplugged mode all by yourself!<br/><br/><i/>For an extra challenge - what else can you make Marty do when he sees each colour?",

  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.description": "Let's learn how programmers use lists to do so many cool things!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-1": "In this tutorial, we’re going to learn all about lists!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-2": "So, when it comes to programming, <b/>what is a list?</b> <br/><br/>Programmers use lists, sometimes called arrays, to store data in a specific order.  <br/><br/>Programmers can control how data is added, removed and stored in the list, as well as talk about data by its number in the list (called an index).",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-3": "For example, in this list, we could say: <br/><br/><i/>remove person number 2</i>, rather than <i/>remove Marty</i>. <br/><br/><i/>swap person number 3 and number 4</i>, rather than <i/>swap Sam and Kirsty</i>. <br/><br/>Lists help programmers control and store information easily, even when it changes.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-4": "In this tutorial, we'll use a list to help Marty memorise a line of colour tiles that he walks on.<br/><br/>Before we start coding, you'll need 4 unplugged mode tiles laid out in a line like this:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-5": "Navigate to the Variables tab and click \"Make a List\" <br/><br/>Call the list \"colours\" and click \"ok\"",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-6": "Each time Marty goes on to a new tile, we're going to add the colour from his coloursensor to our \"colours\" list.<br/><br/>Select the <b/>add thing to colours</b> block.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-7": "Select a colour sensor block and place it into the <b/>add thing to colours</b> block. <br/><br/> Now our code says, <i/>whatever colour Marty is sensing, add this to the list \"colours\".</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-8": "After we add a colour to our colours list, we want Marty to walk enough steps to reach the next tile along. <br/><br/>Place a <b/>walk forward</b> block as shown, and change the <b/>2</b> to a <b/>7</b>. <br/><br/></i>We find 7 steps enough to go from one unplugged tile to the next, but you can try this out now and change if necessary!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-9": "Before Marty checks his coloursensor, we should tell him to pause to get an accurate reading.Add a <b/>pause movement</b> block as shown below:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-10": "Since we want to repeat this code for each of our 4 colour tiles, let's add a <b/>repeat</b> loop around the code. <br/><br/>Change <b/>10</b> to <b/>4</b> to repeat the code 4 times.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-11": "Now let's get Marty to use his LED eyes to tell us which colours he's seen. <br/><br/>Select 4 <b/>Set select LED eyes to</b> blocks and place them after the repeat loop. <br/><br/>Use the dropdown box to select <b/>both eyes</b>.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-12": "Great job! Now let's make Marty's LEDs change to all the colours in our list. <br/><br/>Navigate to the Variables tab and select the <b/>item 1 of colours</b> block. <br/><br/>Replace the coloured circle with <b/>item 1 of colours</b>, and change the number to go 1,2,3 and 4 like shown here:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-13": "Almost done! <br/><br/>Add a <b/>wait 1 seconds</b> block before each LED block like below, to give enough time for each colour change.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-7.step-14": "You did it!  <br/><br/>Now place your Marty at the beginning of your line of tiles, like shown here, and watch Marty remember each colour!",

  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.description": "Let's learn how programmers use lists to do so many cool things!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-1": "In this tutorial,In this tutorial, we’re going to use a <b/>list</b> to write Marty’s shopping list.<br/><br/>Then, we're going to write some code in an <b/>iterative loop</b> to get Marty to read his shopping list out loud!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-2": "First of all, let's create our list. <br/><br/> Navigate to the Variables tab and click \"Make a List\" <br/><br/>Call the list \"colours\" and click \"ok\"",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-3": "The first thing Marty needs to buy is batteries. <br/><br/>Select the <b/>add thing to Marty's Shopping List</b> block. <br/><br/>Instead of <b/>thing</b>, write <b/>batteries</b>. Click on the block and watch batteries appear on the list",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-4": "The next thing Marty needs is wires!<br/><br/>Keeping the same block as before, change <b/>batteries</b> to <b/>wires</b> and click on the block.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-5": "Marty also needs nuts and bolts! <br/><br/>Use the same block to add nuts and bolts to the list.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-6": "Marty says the most important thing he needs to buy is candy!<br/><br/>Select the <b/>insert thing at 1 of Marty's Shopping List</b> block.<br/><br/>Instead of <b/>thing</b>, write <b/>candy</b>, click on the block and watch candy appear at number 1 on the list!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-7": "The cool thing about lists is they make it super easy to write code! <br/><br/>Both of these code blocks read out Marty's shopping. <br/><br/>However, not using a list, like on the left, we'd have to change this code every time Marty's shopping changed. <br/><br/>If we use a list, like on the right, we can write code that works all the time - no matter how long the list is, or what gets added/removed!",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-8": "We're going to write this code that we can use for any list! <br/><br/>No matter how we change the list, Marty can still read the list out loud with this code! <br/><br/>This repeat loop is special - programmers call them <b/>iterative loops</b> <br/><br/>Iteration means to repeat the same task, changing something each time until a condition is met. <br/><br/>Here you can see the <b/>repeated task</b>, the <b/>condition</b> and the <b/>repeated change</b>.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-9": "To start our iterative loop, select a repeat until block.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-10": "Let's make the variable <b/>item number</b> which we'll use to loop through Marty's shopping list. <br/><br/>Navigate to the variables tab, select Make a Variable, call it <b/>item number</b>, and click \"ok\".",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-11": "Let's set up the repeated task inside our iterative loop: Marty reading out items from his list. <br/><br/>Navigate to the Speak tab, select a <b/>Marty speak</b> block and place it inside the repeat loop.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-12": "We don't want Marty to say hello, we want him to read out an item from the list. <br/><br/>Navigate to the Variables tab, and select <b/>item 1 of Marty's Shopping List</b> block and place it as shown <br/><br/>Replace the number 1 with the <b/>item number</b> variable. <br/><br/>Great work! Now if item number = 3, Marty would say \"wires\".",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-13": "Now let's add the repeated change into our loop.<br/><br/>Each loop, we want to add one to the <b/>item number</b> variable.<br/><br/>Place the <b/>change item number by 1</b> block after the speak block like shown:",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-14": "Finally, we'll set up the condition of our iterative loop - <i/>repeat until: item number is greater than Marty's Shopping List</i> <br/><br/>Place a greater than operator inside the repeat until statement like shown.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-15": "Navigate to the Variables tab and fill in the greater than block like shown, so it reads: <br/><br/><i/>repeat until: item number is greater than Marty's Shopping List</i>",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-16": "You did it! <br/><br/>Before we test our code,  make sure the item number variable is set to zero - if not, you can reset it using this block.",
  "gui.howtos.lessons.type-lesson-marty-blocks-coding-8.step-17": "Awesome, now click your code and listen to Marty tell us his shopping list! <br/><br/>You've learned all about lists, adding and removing elements, using their item numbers in code, and even how to iterate through them!",

  "gui.menuBar.sensorsDashboard": "Sensors Dashboard",
  "gui.menuBar.showCode": "Show Code",
  "gui.gui.toggleMartyMachineTab": "Machine Learning",
  "gui.gui.toggleSaveLoadTab": "Save/Load",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.name": "Cog and Marty Interaction",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.description": "Learn how <b>Cog</b> and <b>Marty</b> can interact with each other",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-1": "In this tutorial we will learn how <b>Cog</b> and <b>Marty</b> can interact with each other. Press 'Next' to start!",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-1.1": "First, let's connect to Cog. Click on the 'Connect a device' button and then select Cog",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-1.1.1": "Great! Now click on the 'connect' button to connect to Cog",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-1.2": "Next, let's connect to Marty. Click on the 'Connect a device' button and then select Marty",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-1.2.1": "Great! Now click on the 'connect' button to connect to Marty",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-2": "Now that we are connected to the robots, let's start coding! To see Cog's blocks, click on the Cog device button",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-3": "Once you have selected the Cog blocks, drag the 'on button press' event block to the script area. This block will listen for when Cog's button is clicked",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-3.hint": "The 'on click cog' event block is under the Event category. Drag it to the script area to start coding",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-5": "Now drag the 'broadcast message' block from the Events category to the script area. This block will broadcast a message when Cog's button is pressed",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-5.hint": "The 'broadcast message' block is under the Events category. Drag it to the script area to start coding",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-6": "Now let's move to Marty. We need to select Marty to see the Marty blocks. Click on the Marty device button",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-7": "Once in Marty Mode, drag the 'When I receive message' block from the Event blocks category to the script area. This block will listen for broadcasted messages",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-7.hint": "The 'on message' block is under the Event category. Drag it to the script area to start coding",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-9": "We're almost there! Drag the 'Dance!' block to the script area. This block will make Marty dance when the message is received",
  "gui.howtos.lessons.type-lesson-cog-and-marty-tutorial.step-10": "Great job! You have successfully coded Cog and Marty to interact with each other. Now click Cog's button to see Marty dance!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.name": "Intro to Cog Lights and Sounds",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.description": "Learn how to program Cog with Blocks, make sounds and lights triggered by interacting with Cog",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-1": "Let's learn how to program Cog with Blocks! <br /><br />We'll connect to Cog, and make it light up and make sounds when the button is pushed!<br /><br />We'll also learn about <b>series</b> code that runs as a sequence, and <b>parallel</b> code that runs at the same time",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-2": "First, let's connect to Cog. Click on the 'Connect a device' button and then select Cog. <br /><br /> You can skip this step if a Cog is already connected",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-3": "Great! Now click on the 'connect' button to connect to Cog<br /><br>Again, you can skip this if you're already connected to a Cog",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-4": "Awesome! You should now have one Cog added, and it should be connected to your cog",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-5": "Select the Events category",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-6": "Add an <b>On Button Press</b> block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-6.hint": "The 'on button press' event block is under the Event category. Drag it to the script area to start coding",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-7": "Select the Looks category",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-8": "Add a <b>Set [ring] LEDs to [color]</b> block, by dragging it to connect with the On Button Press block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-8.hint": "The 'set [ring] LEDs to [color]' block is under the Looks category. Drag it to the script area and connect it to the On Button Press block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-9": "Try it out! <br /><br />Push the button on Cog and the lights should come on!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-10": "Change the color of the LEDs by clicking or pressing on the color blob, then dragging the Color bar. <br /><br />You can also change the Saturation (how vivid a color is) and the Brightness - if you set that to 0 the LEDs will be off",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-11": "Try it out! <br /><br />Push the button on Cog and the lights should change to the new color you selected!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-12": "Add an <b>On Shake</b> block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-12.hint": "The 'on shake' event block is under the Event category. Drag it to the script area away from the code that's already there",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-13": "Add a <b>Turn off LEDs</b> block under the On Shake block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-13.hint": "The 'Turn off LEDs' block is under the Looks category. Drag it to the script area and connect it to the On Shake block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-14": "Try it out! <br /><br />Shake Cog and the lights should turn off!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-15": "Change the <b>Set [ring] LEDs to [color]</b> block to control the button LED instead, by selecting 'button' from the dropdown menu",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-16": "Try it out! <br /><br />Push the button on Cog and now the light in the button should turn on!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-17": "Shake Cog to turn off the LEDs<br /><br />Now change the same dropdown to select 'all' instead.",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-18": "Try it out! <br /><br />Push the button on Cog and all the lights should turn on!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-19": "Add a <b>Set [ring] LEDs to pattern [Flash]</b> block under the Set LED color block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-19.hint": "The 'Set [ring] LEDs to pattern [Flash]' block is under the Looks category. Drag it to the script area and connect it to the block that sets the LED colors",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-20": "Try it out! <br /><br />Push the button on Cog and now the ring of LEDs should start flashing!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-21": "Change the pattern to 'Spin1' and try it out!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-22": "Try out the other patterns in the list",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-23": "Add another <b>Set [ring] LEDs to pattern [Flash]</b> block under the previous one, and change it so that it sets the button to flash.<br /><br />Try it out by pushing the button on Cog",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-23.hint": "The 'Set [ring] LEDs to pattern [Flash]' block is under the Looks category. Drag it to the script area and connect it to the block that sets the LED colors",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-24": "Delete the code from under the On Button Press block by dragging it back to the blocks palette",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-25": "Add a <b>Set LEDs using the ColorPicker</b> block connected to the On Button Press block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-25.hint": "The 'Set LEDs using the ColorPicker' block is under the Looks category. Drag it to the script area and connect it to the On Button Press event",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-26": "Change the individual LED colors using the color picker.<br /><br />First select a color using the color wheel and the saturation and brightness sliders, then select the LEDs you want to set to that color",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-27": "Set the button color too by adding a <b>Set [ring] LEDs to [color]</b> block and changing it to set the button to your favorite color",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-27.hint": "The 'Set [ring] LEDs to [color]' block is under the Looks category. Drag it to the script area and connect it to the Set LEDs using the ColorPicker block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-28": "Try it out! Press the button and the lights will each change to the colors that you picked",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-29": "Select the Control category",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-30": "Add a <b>wait [1] seconds</b> block under the LED blocks",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-30.hint": "The 'wait [1] seconds' block is under the Control category. Drag it to the script area and connect it underneath the two blocks that set the LED colors",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-31": "Add another <b>Set LEDs using the ColorPicker</b> block under the wait block, then change the colors to whatever you choose",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-31.hint": "The 'Set LEDs using the ColorPicker' block is under the Looks category. Drag it to the script area and connect it to the wait block you just added, then change the colors",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-32": "Change the button color too by adding a <b>Set [ring] LEDs to [color]</b> block and changing it to set the button to your favorite color",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-32.hint": "The 'Set [ring] LEDs to [color]' block is under the Looks category. Drag it to the script area and connect it to the last Set LEDs using the ColorPicker block, then select 'button' from the dropdown menu",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-33": "Try it out! Press the button and the lights will turn on, then change after 1 second!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-34": "Add another <b>On Button Press</b> block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-34.hint": "The 'on button press' event block is under the Event category. Drag it to the script area to start coding",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-35": "Select the Sound category",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-36": "Add a <b>Play note [C4] for [1] seconds</b> block under the On Button Press block you just added",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-36.hint": "The 'Play note [C4] for [1] seconds' block is under the Sound category. Drag it to the script area and connect it to the new On Button Press block you added in the last step",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-37": "Change the note to C5 and try it out by pressing the button on Cog!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-38": "Add a <b>Play tone from [200] to [300] Hz for [3] seconds</b> block between the On Button Push block and the Play Note block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-38.hint": "The 'Play tone from [200] to [300]Hz for [3] seconds' block is under the Sound category. Drag it to the script area and connect it in between the On Button Press block and the play note you added in the last step",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-39": "Change the numbers in the Play Tone block to go from 260 to 523 Hz for 1 second.<br /><br />Every musical note has a frequency, and 523Hz is the frequency of C5 - C in the fifth octave.<br /><br />Try it out by pushing the button on Cog",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-40": "When you push the button, the sounds and lights happen at the same time - we say that they are running in <b>parallel</b>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-41": "The individual sounds and lights happen one after another - we say they are running in <b>series</b> or in a sequence",
  "gui.howtos.lessons.type-lesson-cog-tutorial-1.step-42": "Great job! You've learned how to program Cog, to make it respond to button pushes and shakes, and make sounds and lights!'",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.name": "Make a 13-sided dice!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.description": "We'll turn Cog into a dice, showing a different number of lights each time you shake it!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-1": "Let's program Cog to be something useful - a dice!<br /><br />We'll make cog react to being shaken by showing a random number of lights and making the same number of beeps<br /><br />To do that, we're going to learn about <b>Variables</b> - special blocks that can <i>vary</i> or change in value, and <b>Conditionals</b> - blocks that make a decision!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-2": "First, make sure you are connected to a cog.<br /><br />If not, add one like you did in the last tutorial by pressing the Add button in the devices panel and selecting a Cog, then clicking connect. If you need to, skip back to the last tutorial to see how",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-3": "Add an <b>On Shake</b> event block from the <b>Events</b> category",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-4": "Select the <b>Variables</b> category",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-5": "Click the <b>Make a Variable</b> button<br /><br />Set the New variable name to <b>ledID</b> and press OK",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-6": "Select the <b>Control</b> category",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-7": "Add a <b>repeat</b> block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-7.hint": "The 'repeat' block is under the Control category. Drag it to the script area and connect it to the On Shake block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-8": "Go to the <b>Looks</b> category and add a <b>Set LED [1] to [color]</b> block inside of the repeat block<br /><br />Change the color to your favorite color :-)",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-8.hint": "The 'set LED [1] to [color]' block is in the Looks category. Drag it to the script area and place it so it snaps inside the repeat block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-9": "Try it out! <br /><br />What happens if you shake cog?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-10": "Go back to the <b>Variables</b> category and add a <b>Change [ledID] by [1]</b> block just after the LED block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-10.hint": "The 'Change [ledID] by [1]' block is in the Variables category. Drag it to the script area and place it so it snaps inside the repeat block, just after the Set LED block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-11": "Drag the <b>ledID variable</b> over into the <b>Set LED</b> block, so that it reads <b>Set LED <i>ledID</i> to [color]</b>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-12": "Try it out!<br /><br />What happens if you shake Cog?",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-13": "Try it again - more LEDs will turn on!<br /><br />But if you shake Cog <i>again</i> after that, nothing new happens. Let's change that!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-14": "Add a <b>Set [ledID] to [0]</b> block straight after the <b>On Shake</b> block, before the repeat block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-14.hint": "The 'Set [ledID] to [0]' block is in the Variables category. Drag it to the script area and place it so it snaps just after the 'On Shake' block, before the repeat block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-15": "Also add a <b>Turn off all LEDs</b> block from the <b>Looks</b> category<br /><br />Add it just before the repeat block, after the <i>set [ledID] to [0]</i> block you just added",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-15.hint": "The 'Turn off all LEDs' block is in the Looks category.<br /><Br />Make sure you add it between the 'set [ledID] to [0]'' block and the 'repeat' block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-16": "Now try it again! <br /><br />Now when you shake cog it'll reset both the lights and the <i>value</i> of the <b>variable</b> <i>ledID</i>, so that it counts up from 1 to 10",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-17": "Go to the <b>Operators</b> category",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-18": "Drag the <b>pick random [1] to [10]</b> block to replace the number in the repeat block<br /><br />Now, the repeat block will loop a random number of times from 1 to 10, changing each time!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-19": "Cog has 13 programmable LEDs - 12 in the ring and one in the button<br /><br />Change the <b>pick random</b> block to pick a number between 1 and <b>13</b> instead",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-20": "Try it out! <br /><br />Now every time you shake Cog you'll get a different number of lights<br /><Br />You've programmed Cog to be a dice!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-21": "<i>ledID</i> is a <b>variable</b> - it has a value which can be changed or <i>varied</i><br /><br />In this code it counts up to turn on a different LED each time through the loop!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-22": "Let's add some sound feedback too.<br /><Br />Go to the <b>Sounds</b> category and add a <b>Play note [C4] for [1] seconds</b> block<br /><br />Change it to play the note for <b>0.1 seconds</b>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-22.hint": "The 'Play note [C4] for [1] seconds' block is in the Sounds category.<br /><Br />Make sure you add it inside the Repeat loop!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-23": "Also add a short pause by adding a <b>Wait [1] seconds</b> block from the <b>Control</b> category<br /><br />Change the length of the pause to be <b>0.1 seconds</b> as well<br /><br />If we don't add a pause then we won't be able to tell how many beeps there are, as they'll all merge into one long beep!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-23.hint": "The 'Wait [1] seconds' block is in the Control category. Add it to the code by dragging it inside of the repeat loop",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-24": "Try it out!<br /><Br />Now you'll also hear a number of beeps that matches the number of lights!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-25": "Let's make something special happen <b>if</b> you roll the top score - 13<br /><br />Go to the <b>Control</b> category and add an <b>If __ then</b> block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-25.hint": "The 'if __ then' block is in the Control category. Add it to the code by dragging it so it connects after the repeat loop",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-26": "Go to the <b>Operators</b> category",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-27": "Drag the <b>=</b> block <b>into the <i>if</i> block</b><br /><br />This is where we'll set the <b>condition</b>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-27.hint": "The '=' block is under the Operators category. Drag it to the matching shape in the if block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-28": "Go back to the <b>Variables</b> category and drag the <b>ledID variable</b> into the <b>first box of the equals block</b><br /><br />Then <b>set the second box to 13</b>, so that the whole line reads <b>if ledID = 13 then</b>",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-29": "The code inside this <b>if</b> block will only be run <b>if</b> the <b>variable</b> ledID is <b>equal</b> to 13<br /><br />It will check this after the <b>repeat</b> block has finished repeating, as the code continues down the sequence<br /><br />If the ledID <b>variable</b> is anything else other than 13 then the whole <b>if</b> block and any code in it will be skipped<br /><br />The <b>if</b> block is a type of <b>conditional</b> - the code inside it will only be run if the <b>condition</b> you set is true",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-30": "Let's add something inside the <b>if</b> block!<br /><br />Go to the <b>sounds</b> category and add a <b>Play tune</b> block",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-30.hint": "The 'Play tune' block is in the Sounds category. Add it to the code by dragging it so it connects inside the if condition",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-31": "Change the tune to <b>whistle</b> from the dropdown menu",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-32": "Also add some lighting effects from the looks menu<br /><br />For example we can make the ring and button LEDs show a pattern",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-32.hint": "The 'Set [ring] LED to pattern [Flash]' block is in the Looks category. Add two of them inside the if condition, and change one to set the button pattern",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-33": "Try it out!<br /><br />See if you can roll a 13 on the dice by shaking Cog!",
  "gui.howtos.lessons.type-lesson-cog-tutorial-2.step-42": "Well done!<br /><br />You've learned that a <b>variable</b> is something that can change in <b>value</b>. We can use them to make our code do different things without needing to change the code<br /><br />We learned about <b>if</b> blocks - these can be used to make code only run if a certain <b>condition</b> is met<br /><br />And we learned how to use a repeat <b>loop</b> to do something lots of times - in this case turning on a different LED each time",
  "gui.spriteSelector.sprites": "SPRITES",
  "gui.deviceSelector.devices": "DEVICES",
  "gui.spriteSelector.addSpriteFromLibrary": "Choose a Sprite",
  "gui.spriteSelector.addSpriteFromPaint": "Paint",
  "gui.spriteSelector.addSpriteFromSurprise": "Surprise",
  "gui.spriteSelector.addSpriteFromFile": "Upload Sprite",
  "gui.deviceSelector.addDeviceByConnecting": "Connect to a Device",
  "gui.deviceSelector.addDeviceFromLibrary": "Choose a Device",
  "gui.spriteSelector.noSpritesInUse": "No sprites in use",
  "gui.deviceSelector.noDevicesInUse": "Add a device",
  "gui.saveLoad.localStorageTitle": "In the App",
  "gui.saveLoad.localStorageSubtitle": "Local Storage",
  "gui.saveLoad.cloudStorageTitle": "In the Cloud",
  "gui.saveLoad.cloudStorageSubtitle": "Cloud Storage",
  "gui.saveLoad.portableFileStorageTitle": "Portable",
  "gui.saveLoad.portableFileStorageSubtitle": "File Storage",
  "gui.saveLoad.createNewSaveFile": "Create a new save file:",
  "gui.saveLoad.savedFilesTitle": "Your Saved Files:",
  "gui.saveLoad.deleteFile": "Delete",
  "gui.saveLoad.loadFile": "Load",
  "gui.saveLoad.saveFile": "Save",
  "gui.saveLoad.saveFileNamePlaceholder": "Type what you would like to name your new save file here...",
  "gui.saveLoad.fileLoadError": "Failed to load project.",
  "gui.saveLoad.fileSaveError": "Failed to save project.",
  "gui.saveLoad.overwriteFile": "Are you sure you want to overwrite this file?",
  "gui.saveLoad.copyToClipboard": "Copy to Clipboard",
  "gui.saveLoad.copied": "Copied!",
  "gui.saveLoad.saveProject": "Save Project",
  "gui.saveLoad.projectSaved": "Project saved successfully!",
  "gui.saveLoad.projectSaveFailed": "Failed to save project",
  "gui.saveLoad.projectLoaded": "Project loaded successfully!",
  "gui.saveLoad.projectLoadFailed": "Failed to load project",
  "gui.saveLoad.loadProjectPlaceholder": "Type the name of the cloud save file you would like to load here...",
  "gui.saveLoad.createNewCloudSave": "Create a new cloud save file:",
  "gui.saveLoad.saveFileCode": "Your autogenerated Save File Code is:",
  "gui.saveLoad.saveFilePlaceholder": "Your autogenerated Save File Code is:",
  "gui.saveLoad.loadProjectTitle": "Load Project",
  "gui.saveLoad.tipsTitle": "Tips for Cloud Saving:",
  "gui.saveLoad.tips1": "Make sure to write down or record the auto-generated code that is provided each time you save a new file. You will need this to load it in the future.",
  "gui.saveLoad.tips2": "Although the Marty the Robot app will continue to auto-save files to the local space storage, there is no auto-save function for cloud save files. Please manually re-save your file each time, if you wish them to be available for download over cloud storage.",
  "gui.saveLoad.tips3": "Each time you re-save a file to cloud storage, you will be provided with a NEW SAVE FILE CODE. Please take a note of this.",
  "gui.saveLoad.saveToFile": "Save to File",
  "gui.saveLoad.loadFromFile": "Load from File",
  "gui.saveLoad.fileSaved": "File Saved!",
  "gui.martyMachineModelEditor.model": "Model Name",
  "gui.martyMachineModelEditor.className": "Collect data for",
  "gui.martyMachineModelEditor.createNewClass": "Create class",
  "gui.martyMachineModelEditor.samples": "Samples",
  "gui.MartyMachineModelEditor.record": "Record Data",
  "gui.MartyMachineModelEditor.stop": "Stop",
  "gui.MartyMachineModelEditor.train": "Train",
  "gui.MartyMachineModelEditor.run": "Run",
  "gui.MartyMachineModelEditor.save": "Save",
  "gui.MartyMachineModelEditor.saving": "Saving...",
  "gui.martyMachineTab.addNew": "Add New Model",
  "gui.martyMachineTab.newImageModelMarty": "New Image Model (Marty)",
  "gui.martyMachineTab.newImageModelDevice": "New Image Model (Device)",
  "gui.martyMachineTab.newAccelerometerModel": "New Accelerometer Model",
  "gui.martyMachineTab.newAudioModel": "New Audio Model",
  "gui.martyMachineTab.loadTMModel": "Load TM Model",
  "gui.martyMachineTab.tutorials": "Tutorials",
  "gui.martyMachineTab.alertSelectDevice": "Oops! Please select a Marty or a Cog device to use the accelerometer model.",
  "gui.martyMachineTab.alertConnectDevice": "Oops! Please connect the device to use the accelerometer model.",
  "gui.martyMachineTab.alertModelNameExists": "Model name already exists, please choose another name.",
  "martyMachine.modelNameExists": "Oops! Model name already exists, please choose a different name.",
  "martyMachine.backgroundNoiseClassNeedsSamples": "Oops! The background noise class needs at least 10 samples to be trained. Please add more samples to the background noise class.",
  "martyMachine.classNameExists": "Oops! Class name already exists, please choose a different name.",
  "martyMachine.selectClassAlert": "Please add or select an existing class before recording samples.",
  "gui.MartyMachineNewModelConfirmationModal.label": "Unsaved changes will be lost.",
  "gui.MartyMachineNewModelConfirmationModal.headsUp": "Just a heads-up! If you've made any changes to the current model, they won't be saved. Are you okay to continue?",
  "gui.MartyMachineNewModelConfirmationModal.close": "Close",
  "gui.MartyMachineNewModelConfirmationModal.continue": "Continue",
  "gui.TfVisChart.loadingTitle": "Loading Loss Plot",
  "gui.TfVisChart.loadingSubtitle": "This might take a while, please wait...",
  "gui.MartyMachineModelEditor.requiresAtLeast10Samples": "Requires at least 10 samples",
  "gui.MartyMachineModelEditor.createNewClass": "Create New Class",
  "gui.howtos.marty-machine-create-model.name": "Create AI Model",
  "gui.howtos.marty-machine-create-model.step_create-model": "Create New Model",
  "gui.howtos.marty-machine-create-audio-model.step_visit-user-guide": "Visit our User Guide for more info",
  "gui.howtos.marty-machine-create-image-model.name": "Create Image Model",
  "gui.howtos.marty-machine-create-image-model.step_create-image-model": "Create New Image Model",
  "gui.howtos.marty-machine-create-image-model.step_change-model-name": "Change Model Name",
  "gui.howtos.marty-machine-create-image-model.step_collect-data": "Collect Data",
  "gui.howtos.marty-machine-create-image-model.step_train-model": "Train Model",
  "gui.howtos.marty-machine-create-image-model.step_run-model": "Run Model",
  "gui.howtos.marty-machine-create-image-model.step_save-model": "Save Model",
  "gui.howtos.marty-machine-create-audio-model.name": "Create Audio Model",
  "gui.howtos.marty-machine-create-audio-model.step_create-audio-model": "Create New Audio Model",
  "gui.howtos.marty-machine-create-audio-model.step_change-model-name": "Change Model Name",
  "gui.howtos.marty-machine-create-audio-model.step_collect-data": "Collect Data",
  "gui.howtos.marty-machine-create-audio-model.step_train-model": "Train Model",
  "gui.howtos.marty-machine-create-audio-model.step_run-model": "Run Model",
  "gui.howtos.marty-machine-create-audio-model.step_save-model": "Save Model",
  "gui.howtos.marty-machine-load-tm-model.name": "Load Teachable Machine Model",
  "gui.howtos.marty-machine-load-tm-model.step_load-tm-model": "Load Teachable Machine Model",
  "gui.howtos.marty-machine-load-and-run-image-model.name": "Load and Run Image Model",
  "gui.howtos.marty-machine-load-and-run-image-model.step_load-and-run-image-model": "Bring up the AI blocks",
  "gui.howtos.marty-machine-load-and-run-image-model.step_load-model": "Load Model",
  "gui.howtos.marty-machine-load-and-run-image-model.step_classification-on": "Turn Classification On",
  "gui.howtos.marty-machine-load-and-run-image-model.step_classify-image": "Classify Image",
  "gui.howtos.marty-machine-load-and-run-audio-model.name": "Load and Run Audio Model",
  "gui.howtos.marty-machine-load-and-run-audio-model.step_load-and-run-audio-model": "Bring up the AI blocks",
  "gui.howtos.marty-machine-load-and-run-audio-model.step_load-model": "Load Model",
  "gui.howtos.marty-machine-load-and-run-audio-model.step_classification-on": "Turn Classification On",
  "gui.howtos.marty-machine-load-and-run-audio-model.step_classify-audio": "Classify Audio"
}
